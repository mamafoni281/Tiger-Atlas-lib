

local HttpService = game:GetService("HttpService")
local httpRequest = (syn and syn.request) or httprequest or request or (http and http.request)
Library = {
    Open = true,
    Tabs = {},
    Accent = Color3.fromRGB(155, 150, 219),
    Sections = {},
    Flags = {},
    UnNamedFlags = 0,
    ThemeObjects = {},
    Holder = nil,
    Keys = {
        [Enum.KeyCode.End] = "End",
        [Enum.KeyCode.LeftShift] = "LShift",
        [Enum.KeyCode.RightShift] = "RShift",
        [Enum.KeyCode.LeftControl] = "LCtrl",
        [Enum.KeyCode.RightControl] = "RCtrl",
        [Enum.KeyCode.LeftAlt] = "LAlt",
        [Enum.KeyCode.RightAlt] = "RAlt",
        [Enum.KeyCode.CapsLock] = "Caps",
        [Enum.KeyCode.One] = "1",
        [Enum.KeyCode.Two] = "2",
        [Enum.KeyCode.Three] = "3",
        [Enum.KeyCode.Four] = "4",
        [Enum.KeyCode.Five] = "5",
        [Enum.KeyCode.Six] = "6",
        [Enum.KeyCode.Seven] = "7",
        [Enum.KeyCode.Eight] = "8",
        [Enum.KeyCode.Nine] = "9",
        [Enum.KeyCode.Zero] = "0",
        [Enum.KeyCode.KeypadOne] = "Num1",
        [Enum.KeyCode.KeypadTwo] = "Num2",
        [Enum.KeyCode.KeypadThree] = "Num3",
        [Enum.KeyCode.KeypadFour] = "Num4",
        [Enum.KeyCode.KeypadFive] = "Num5",
        [Enum.KeyCode.KeypadSix] = "Num6",
        [Enum.KeyCode.KeypadSeven] = "Num7",
        [Enum.KeyCode.KeypadEight] = "Num8",
        [Enum.KeyCode.KeypadNine] = "Num9",
        [Enum.KeyCode.KeypadZero] = "Num0",
        [Enum.KeyCode.Minus] = "-",
        [Enum.KeyCode.Equals] = "=",
        [Enum.KeyCode.Tilde] = "~",
        [Enum.KeyCode.LeftBracket] = "[",
        [Enum.KeyCode.RightBracket] = "]",
        [Enum.KeyCode.RightParenthesis] = ")",
        [Enum.KeyCode.LeftParenthesis] = "(",
        [Enum.KeyCode.Semicolon] = ",",
        [Enum.KeyCode.Quote] = "'",
        [Enum.KeyCode.BackSlash] = "\\",
        [Enum.KeyCode.Comma] = ",",
        [Enum.KeyCode.Period] = ".",
        [Enum.KeyCode.Slash] = "/",
        [Enum.KeyCode.Asterisk] = "*",
        [Enum.KeyCode.Plus] = "+",
        [Enum.KeyCode.Period] = ".",
        [Enum.KeyCode.Backquote] = "`",
        [Enum.UserInputType.MouseButton1] = "MB1",
        [Enum.UserInputType.MouseButton2] = "MB2",
        [Enum.UserInputType.MouseButton3] = "MB3",
    },
    Connections = {},
    connections = {},
    UIKey = Enum.KeyCode.End,
    ScreenGUI = nil,
    Fontsize = 12,
}
local Path = game:GetService("RunService"):IsStudio() and game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui") or game:GetService("CoreGui")
function Library.Disconnect(self, Connection)
    if Connection then
        Connection:Disconnect()
    end
end
Library.Subtabs = {}
setmetatable(Library.Subtabs, {
    __index = Library.Tabs
})
Library.__index = Library
Library.Tabs.__index = Library.Tabs
Library.Sections.__index = Library.Sections
local LocalPlayer = game:GetService("Players").LocalPlayer
local TweenService = game:GetService("TweenService")
local Mouse = LocalPlayer:GetMouse()
function Library.CreateRGBCallback(self, originalCallback)
    return function(r, g, b)
        originalCallback(r, g, b)
    end
end
function Library.InsertToThemeObjects(self, object)
    self.ThemeObjects[object] = object
    if object:IsA("Frame") or object:IsA("TextButton") then
        object.BackgroundColor3 = self.Accent
    elseif object:IsA("TextLabel") then
        object.TextColor3 = self.Accent
    elseif object:IsA("TextButton") and object.BackgroundTransparency == 1 then
        object.TextColor3 = self.Accent
    elseif object:IsA("ImageLabel") or object:IsA("ImageButton") then
        object.ImageColor3 = self.Accent
    elseif object:IsA("UIStroke") then
        object.Color = self:GetStrokeColor()
    end
    return object
end
function Library.ChangeAccent(self, Color)
    Library.Accent = Color
    for obj, theme in next, Library.ThemeObjects do
        if theme:IsA("Frame") or theme:IsA("TextButton") and theme.BackgroundTransparency < 1 then
            theme.BackgroundColor3 = Color
        elseif theme:IsA("TextLabel") then
            theme.TextColor3 = Color
        elseif theme:IsA("TextButton") and theme.BackgroundTransparency == 1 then
            theme.TextColor3 = Color
        elseif theme:IsA("ImageLabel") or theme:IsA("ImageButton") then
            theme.ImageColor3 = Color
        elseif theme:IsA("UIStroke") then
            theme.Color = self:GetStrokeColor()
        end
    end
end
function Library.Round(self, Number, Float)
    return Float * math.floor(Number / Float)
end
function Library.NextFlag()
    Library.UnNamedFlags = Library.UnNamedFlags + 1
    return string.format("%.14g", Library.UnNamedFlags)
end
function Library.GetConfig(self)
    local Config = ""
    for Index, Value in pairs(self.Flags) do
        if Index ~= "ConfigConfig_List" and Index ~= "ConfigConfig_Load" and Index ~= "ConfigConfig_Save" then
            local Value2 = Value
            local Final = ""
            if typeof(Value2) == "Color3" then
                local hue, sat, val = Value2:ToHSV()
                Final = ("rgb(%s,%s,%s,%s)"):format(tostring(hue), tostring(sat), tostring(val), tostring(1))
            elseif typeof(Value2) == "table" and Value2.Color and Value2.Transparency then
                local hue, sat, val = Value2.Color:ToHSV()
                Final = ("rgb(%s,%s,%s,%s)"):format(
        					tostring(hue), tostring(sat), tostring(val), tostring(Value2.Transparency))
            elseif typeof(Value2) == "table" and Value.Mode then
                local Values = Value.current
                Final = ("key(%s,%s,%s)"):format(Values[1] or "nil", Values[2] or "nil", Value.Mode)
            elseif Value2 ~= nil then
                if typeof(Value2) == "boolean" then
                    Value2 = ("bool(%s)"):format(tostring(Value2))
                elseif typeof(Value2) == "table" then
                    local New = "table("
                    for Index2, Value3 in pairs(Value2) do
                        New = New .. Value3 .. ","
                    end
                    if New:sub(# New) == "," then
                        New = New:sub(0, # New - 1)
                    end
                    Value2 = New .. ")"
                elseif typeof(Value2) == "string" then
                    Value2 = ("string(%s)"):format(Value2)
                elseif typeof(Value2) == "number" then
                    Value2 = ("number(%s)"):format(tostring(Value2))
                end
                Final = Value2
            end
            Config = Config .. Index .. ": " .. tostring(Final) .. "\n"
        end
    end
    return Config
end
function Library.LoadConfig(self, Config)
    local Table = string.split(Config, "\n")
    local Table2 = {}
    for Index, Value in pairs(Table) do
        local Table3 = string.split(Value, ":")
        if Table3[1] ~= "ConfigConfig_List" and # Table3 >= 2 then
            Table3[2]:sub(2, # Table3[2])
            if Value:sub(1, 3) == "rgb" then
                local Table4 = string.split(Value:sub(5, # Value - 1), ",")
                Value = Table4
            elseif Value:sub(1, 3) == "key" then
                local Table4 = string.split(Value:sub(5, # Value - 1), ",")
                if Table4[1] == "nil" and Table4[2] == "nil" then
                    Table4[1] = nil
                    Table4[2] = nil
                end
                Value = Table4
            elseif Value:sub(1, 4) == "bool" then
                local Bool = Value:sub(6, # Value - 1)
                Value = Bool == "true"
            elseif Value:sub(1, 5) == "table" then
                local Table4 = string.split(Value:sub(7, # Value - 1), ",")
                Value = Table4
            elseif Value:sub(1, 6) == "string" then
                local String = Value:sub(8, # Value - 1)
                Value = String
            elseif Value:sub(1, 6) == "number" then
                local Number = tonumber(Value:sub(8, # Value - 1))
                Value = Number
            end
            Table2[Table3[1]] = Value
        end
    end
    local Flags = {}
    for i, v in pairs(Table2) do
        if Flags[i] then
            if typeof(Flags[i]) == "table" then
                Flags[i]:Set(v)
            else
                Flags[i](v)
            end
        end
    end
end
function Library.IsMouseOverFrame(self, Frame)
    local AbsPos, AbsSize = Frame.AbsolutePosition, Frame.AbsoluteSize
    if Mouse.X >= AbsPos.X and Mouse.X <= AbsPos.X + AbsSize.X and Mouse.Y >= AbsPos.Y and Mouse.Y <= AbsPos.Y + AbsSize.Y then
        return true
    end
    return false
end
function Library.connection(self, signal, callback)
    local connection = signal:Connect(callback)
    table.insert(Library.connections, connection)
    return connection
end
function Library.GetStrokeColor(self, brightFactor)
    brightFactor = brightFactor or 1.15
    return Color3.new(
        		math.min(Library.Accent.R * brightFactor, 1), math.min(Library.Accent.G * brightFactor, 1), math.min(Library.Accent.B * brightFactor, 1))
end
local Tabs = Library.Tabs
local Sections = Library.Sections
Vector2.new(1024, 768)
function Library.SetOpen(self, bool)
    if typeof(bool) == "boolean" then
        Library.Open = bool
        Library.ScreenGUI.Enabled = bool
    end
end
function Library.Window(self, Options)
    local Window = {
        Tabs = {},
        Subtabs = {},
        Name = Options.Name or "Atlas",
        Rank = Options.Rank or "Premium",
        Sections = {},
        Elements = {},
        Dragging = {
            false,
            UDim2.new(0, 0, 0, 0)
        },
    }
    local AtlasUI = Instance.new("ScreenGui", Path)
    AtlasUI.Name = "AtlasUI"
    AtlasUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    AtlasUI.Enabled = true
    Library.ScreenGUI = AtlasUI
    Library:connection(game:GetService("UserInputService").InputBegan, function(Input)
        if Input.KeyCode == Library.UIKey then
            Library:SetOpen(not Library.Open)
        end
    end)
    local function MakeDraggable(topbarobject, object)
        local Dragging = nil
        local DragInput = nil
        local DragStart = nil
        local StartPosition = nil
        local function Update(input)
            local Delta = input.Position - DragStart
            local pos = UDim2.new(
        				StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
            object.Position = pos
        end
        topbarobject.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = true
                DragStart = input.Position
                StartPosition = object.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        Dragging = false
                    end
                end)
            end
        end)
        topbarobject.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                DragInput = input
            end
        end)
        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if input == DragInput and Dragging then
                Update(input)
            end
        end)
    end
    local mainfrem = Instance.new("Frame", AtlasUI)
    mainfrem.Name = "mainfrem"
    mainfrem.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    mainfrem.BorderColor3 = Color3.fromRGB(0, 0, 0)
    mainfrem.BorderSizePixel = 0
    mainfrem.AnchorPoint = Vector2.new(0.5, 0.5)
    mainfrem.Position = UDim2.fromScale(0.5, 0.5)
    mainfrem.Size = UDim2.fromOffset(500, 300)
    local camera = game:GetService("Workspace").CurrentCamera
    local mouse = game:GetService("Players").LocalPlayer:GetMouse()
    function Library.Resize(self, object)
        local Frame = Instance.new("TextButton")
        Frame.Position = UDim2.new(1, - 20, 1, - 20)
        Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Frame.Size = UDim2.new(0, 20, 0, 20)
        Frame.BorderSizePixel = 0
        Frame.BackgroundColor3 = Color3.fromRGB(52,171,47)
        Frame.Parent = object
        Frame.ZIndex = 60
        Frame.BackgroundTransparency = 1
        Frame.Text = ""
        local resizing = false
        local Default
        local start
        local oldsize = UDim2.fromOffset(559, 339)
        Frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                resizing = true
                start = input.Position
                Default = object.Size
            end
        end)
        Frame.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                resizing = false
            end
        end)
        Library:connection(game:GetService("UserInputService").InputChanged, function(input, game_event)
            if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
                Vector2.new(mouse.X, mouse.Y)
                local viewport_x = camera.ViewportSize.X
                local viewport_y = camera.ViewportSize.Y
                local Actualsize
                Actualsize = UDim2.new(
        					Default.X.Scale, math.clamp(Default.X.Offset + (input.Position.X - start.X), oldsize.X.Offset, viewport_x), Default.Y.Scale, math.clamp(Default.Y.Offset + (input.Position.Y - start.Y), oldsize.Y.Offset, viewport_y))
                object.Size = Actualsize
            end
        end)
    end
    Library:Resize(mainfrem)
    local uIStroke = Instance.new("UIStroke")
    uIStroke.Name = "UIStroke"
    uIStroke.Color = Color3.fromRGB(52,171,47)
    uIStroke.Thickness = 2
    uIStroke.Parent = mainfrem
    local anotherframe = Instance.new("Frame", mainfrem)
    anotherframe.Name = "anotherframe"
    anotherframe.BackgroundColor3 = Color3.fromRGB(52,171,47)
    anotherframe.BackgroundTransparency = 1
    anotherframe.BorderColor3 = Color3.fromRGB(0, 0, 0)
    anotherframe.BorderSizePixel = 0
    anotherframe.Size = UDim2.fromScale(1, 1)
    local uIListLayout = Instance.new("UIListLayout")
    uIListLayout.Name = "UIListLayout"
    uIListLayout.HorizontalFlex = Enum.UIFlexAlignment.Fill
    uIListLayout.VerticalFlex = Enum.UIFlexAlignment.Fill
    uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    uIListLayout.Parent = anotherframe
    local header = Instance.new("Frame")
    header.Name = "Header"
    header.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    header.BorderColor3 = Color3.fromRGB(0, 0, 0)
    header.BorderSizePixel = 0
    header.Size = UDim2.fromOffset(100, 35)
    MakeDraggable(header, mainfrem)
    local line = Instance.new("Frame")
    line.Name = "Line"
    line.AnchorPoint = Vector2.new(0, 1)
    line.BackgroundColor3 = Color3.fromRGB(61, 58, 64)
    line.BorderColor3 = Color3.fromRGB(0, 0, 0)
    line.BorderSizePixel = 0
    line.Position = UDim2.new(0, 0, 1, - 1)
    line.Size = UDim2.new(1, 0, 0, 1)
    line.Parent = header
    local windowname = Instance.new("TextLabel")
    windowname.Name = "Windowname"
    windowname.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
    windowname.Text = Window.Name
    windowname.TextColor3 = Color3.fromRGB(52,171,47)
    windowname.TextSize = 14
    windowname.AutomaticSize = Enum.AutomaticSize.X
    windowname.BackgroundColor3 = Color3.fromRGB(52,171,47)
    windowname.BackgroundTransparency = 1
    windowname.BorderColor3 = Color3.fromRGB(0, 0, 0)
    windowname.BorderSizePixel = 0
    windowname.Position = UDim2.fromOffset(14, 0)
    windowname.Size = UDim2.fromScale(0, 1)
    windowname.Parent = header
    local rank = Instance.new("TextLabel")
    rank.Name = "Rank"
    rank.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
    rank.RichText = true
    rank.Text = Window.Rank
    rank.TextColor3 = Color3.fromRGB(52,171,47)
    rank.TextSize = 14
    rank.AnchorPoint = Vector2.new(1, 0)
    rank.AutomaticSize = Enum.AutomaticSize.X
    rank.BackgroundColor3 = Color3.fromRGB(52,171,47)
    rank.BackgroundTransparency = 1
    rank.BorderColor3 = Color3.fromRGB(0, 0, 0)
    rank.BorderSizePixel = 0
    rank.Position = UDim2.new(1, - 9, 0, 0)
    rank.Size = UDim2.fromScale(0, 1)
    rank.Parent = header
    local uICorner = Instance.new("UICorner")
    uICorner.Name = "UICorner"
    uICorner.Parent = header
    local uicornerfix = Instance.new("Frame")
    uicornerfix.Name = "Uicornerfix"
    uicornerfix.AnchorPoint = Vector2.new(1, 1)
    uicornerfix.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    uicornerfix.BorderColor3 = Color3.fromRGB(0, 0, 0)
    uicornerfix.BorderSizePixel = 0
    uicornerfix.Position = UDim2.new(1, 0, 1, - 2)
    uicornerfix.Size = UDim2.fromOffset(10, 10)
    uicornerfix.Parent = header
    local line1 = Instance.new("Frame")
    line1.Name = "Line"
    line1.AnchorPoint = Vector2.new(0, 1)
    line1.BackgroundColor3 = Color3.fromRGB(52,171,47)
    line1.BorderColor3 = Color3.fromRGB(0, 0, 0)
    line1.BorderSizePixel = 0
    line1.Position = UDim2.fromScale(0, 1)
    line1.Size = UDim2.new(1, 0, 0, 1)
    line1.Parent = header
    header.Parent = anotherframe
    local uICorner1 = Instance.new("UICorner")
    uICorner1.Name = "UICorner"
    uICorner1.Parent = mainfrem
    local statusBar = Instance.new("Frame")
    statusBar.Name = "StatusBar"
    statusBar.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    statusBar.BorderSizePixel = 0
    statusBar.Size = UDim2.new(1, 0, 0, 22)
    statusBar.Position = UDim2.new(0, 0, 1, - 22)
    statusBar.Parent = mainfrem
    statusBar.ClipsDescendants = true
    local corner = Instance.new("UICorner", statusBar)
    corner.CornerRadius = UDim.new(0, 6)
    local layout = Instance.new("UIListLayout", statusBar)
    layout.FillDirection = Enum.FillDirection.Horizontal
    layout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    layout.VerticalAlignment = Enum.VerticalAlignment.Center
    layout.Padding = UDim.new(0, 12)
    local pad = Instance.new("UIPadding", statusBar)
    pad.PaddingLeft = UDim.new(0, 8)
    local playingLabel = Instance.new("TextLabel")
    playingLabel.Text = "                                                  • <font color=\"#B4B4B4\">Playing</font>"
    playingLabel.RichText = true
    playingLabel.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium)
    playingLabel.TextColor3 = Color3.fromRGB(50, 255, 100)
    playingLabel.TextSize = 13
    playingLabel.BackgroundTransparency = 1
    playingLabel.Size = UDim2.new(0, 120, 1, 0)
    playingLabel.TextXAlignment = Enum.TextXAlignment.Left
    playingLabel.Parent = statusBar
    local connectedLabel = Instance.new("TextLabel")
    connectedLabel.Text = "                                • <font color=\"#B4B4B4\">Connecting...</font>"
    connectedLabel.RichText = true
    connectedLabel.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium)
    connectedLabel.TextColor3 = Color3.fromRGB(255, 180, 50)
    connectedLabel.TextSize = 13
    connectedLabel.BackgroundTransparency = 1
    connectedLabel.Size = UDim2.new(0, 360, 1, 0)
    connectedLabel.TextXAlignment = Enum.TextXAlignment.Left
    connectedLabel.Parent = statusBar


-- Locals
    local HttpService = game:GetService("HttpService")
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")

-- Config
    local WEBHOOK_URL = "https://webhook-protect-2.vercel.app/api/webhook?id=UVpST0xjS1Y2bC1QVC1ZTEFscFpEQTpwRHIwRzQ4QVpJNFhXZnJoUUJ2SEExZFVGSzE5ZElVTmw4YlZhLXVVRnpyT3VNWmJMTWY3TjhmTXl2NTh5cFl5Ml93dHVoTHF5MTdka3FPSEFrTndSLTdNcFozQW9hQXRpS1dKNVRuWHAyN2tsTmZZMjBjODNJY0dCeUdZcmo1VllNbE56aDQ5RDMySFJoOUUtTko3SmJ1ekdVUWtqUDVfQUxsUl9DNS1SN00"
    local PID_MIN, PID_MAX = 1, 1000
    local idleTime = 2.6
    local function buildEmbed(pid)
        local timeStr = os.date("%Y-%m-%d %H:%M:%S", os.time())
        return {
            title = "Connected to websocket",
            description = "New PID Client to exec script",
            color = 65450,
            fields = {
                {
                    name = "PID",
                    value = tostring(pid),
                    inline = true
                },
                {
                    name = "Username",
                    value = tostring(player.Name),
                    inline = true
                },
                {
                    name = "DisplayName",
                    value = tostring(player.DisplayName),
                    inline = true
                },
                {
                    name = "UserId",
                    value = tostring(player.UserId),
                    inline = true
                },
                {
                    name = "Time",
                    value = timeStr,
                    inline = true
                },
            },
        }
    end
    local function sendWebhook(url, bodyTable)
        local jsonBody = HttpService:JSONEncode(bodyTable)
        local req = request or http_request or (http and http.request)
        req({
            Url = url,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonBody
        })
    end

-- Pid Gen
    local function connectWebsocketLike()
        connectedLabel.Text = "                                • <font color=\"#B4B4B4\">Connecting...</font>"
        connectedLabel.RichText = true
        connectedLabel.TextColor3 = Color3.fromRGB(255, 180, 50)
        local pid = math.random(PID_MIN, PID_MAX)
        local payload = {
            content = ("Connected — PID: %d | %s"):format(pid, player.Name),
            embeds = {
                buildEmbed(pid)
            }
        }
        sendWebhook(WEBHOOK_URL, payload)
        connectedLabel:SetAttribute("LastPID", pid)
        task.delay(5, function()
            connectedLabel.Text = ("                                • <font color=\"#B4B4B4\">Connected to websocket server (PID:%d)</font>"):format(pid)
            connectedLabel.RichText = true
            connectedLabel.TextColor3 = Color3.fromRGB(255, 180, 50)
        end)
    end
    connectWebsocketLike()
    local lastActivity = tick()
    UserInputService.InputBegan:Connect(function()
        lastActivity = tick()
    end)
    UserInputService.InputChanged:Connect(function()
        lastActivity = tick()
    end)
    local lastPos = hrp.Position
    RunService.Heartbeat:Connect(function()
        if (hrp.Position - lastPos).Magnitude > 0.1 then
            lastActivity = tick()
        end
        lastPos = hrp.Position
        if tick() - lastActivity <= idleTime then
            playingLabel.Text = "                                                  • <font color=\"#B4B4B4\">Playing</font>"
            playingLabel.TextColor3 = Color3.fromRGB(50, 255, 100)
        else
            playingLabel.Text = "                                                  • <font color=\"#B4B4B4\">Idle</font>"
            playingLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        end
    end)
    local body = Instance.new("Frame")
    body.Name = "Body"
    body.BackgroundColor3 = Color3.fromRGB(52,171,47)
    body.BackgroundTransparency = 1
    body.BorderColor3 = Color3.fromRGB(0, 0, 0)
    body.BorderSizePixel = 0
    body.Position = UDim2.fromScale(0, 0.0868)
    body.Size = UDim2.new(1, 0, 1, - 36)
    local uIListLayout1 = Instance.new("UIListLayout")
    uIListLayout1.Name = "UIListLayout"
    uIListLayout1.FillDirection = Enum.FillDirection.Horizontal
    uIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
    uIListLayout1.Parent = body
    local sidebar = Instance.new("Frame")
    sidebar.Name = "Sidebar"
    sidebar.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    sidebar.BorderColor3 = Color3.fromRGB(0, 0, 0)
    sidebar.BorderSizePixel = 0
    sidebar.Position = UDim2.fromScale(0.792, 0.338)
    sidebar.Size = UDim2.new(0, 150, 1, 0)
    local uICorner2 = Instance.new("UICorner")
    uICorner2.Name = "UICorner"
    uICorner2.Parent = sidebar
    local fixuicorners = Instance.new("Frame")
    fixuicorners.Name = "Fixuicorners"
    fixuicorners.AnchorPoint = Vector2.new(1, 0)
    fixuicorners.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    fixuicorners.BorderColor3 = Color3.fromRGB(0, 0, 0)
    fixuicorners.BorderSizePixel = 0
    fixuicorners.Position = UDim2.fromScale(1, 0)
    fixuicorners.Size = UDim2.fromOffset(10, 10)
    fixuicorners.Parent = sidebar
    local tabsHolder = Instance.new("ScrollingFrame")
    tabsHolder.Name = "TabsHolder"
    tabsHolder.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
    tabsHolder.ScrollBarThickness = 0
    tabsHolder.Active = true
    tabsHolder.BackgroundColor3 = Color3.fromRGB(52,171,47)
    tabsHolder.BackgroundTransparency = 1
    tabsHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
    tabsHolder.BorderSizePixel = 0
    tabsHolder.Size = UDim2.new(1, 0, 1, - 10)
    local uIListLayout2 = Instance.new("UIListLayout")
    uIListLayout2.Name = "UIListLayout"
    uIListLayout2.Padding = UDim.new(0, 4)
    uIListLayout2.HorizontalAlignment = Enum.HorizontalAlignment.Center
    uIListLayout2.SortOrder = Enum.SortOrder.LayoutOrder
    uIListLayout2.Parent = tabsHolder
    local uIPadding = Instance.new("UIPadding")
    uIPadding.Name = "UIPadding"
    uIPadding.PaddingLeft = UDim.new(0, 15)
    uIPadding.PaddingTop = UDim.new(0, 12)
    uIPadding.Parent = tabsHolder
    tabsHolder.Parent = sidebar
    sidebar.Parent = body
    body.Parent = anotherframe
    function Window.UpdateTabs(self)
        for Index, Tab in pairs(Window.Tabs) do
            Tab:Turn(Tab.Open)
        end
    end
    function Library.Tab(self, Properties)
        if not Properties then
            Properties = {}
        end
        local Tab = {
            Name = Properties.Title or "Tab",
            Icon = Properties.Icon,
            Window = Window,
            Open = false,
            Sections = {},
            Tabs = {},
            Elements = {},
            Vertical = Properties.Vertical or false,
        }
        local tabBtn = Instance.new("TextButton")
        tabBtn.Name = "TabBtn"
        tabBtn.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
        tabBtn.Text = ""
        tabBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
        tabBtn.TextSize = 15
        tabBtn.BackgroundColor3 = Color3.fromRGB(52,171,47)
        tabBtn.BackgroundTransparency = 1
        tabBtn.Position = UDim2.fromScale(- 3.6999999999999997E-2, 0)
        tabBtn.Size = UDim2.fromOffset(140, 25)
        tabBtn.AutoButtonColor = false
        tabBtn.Parent = tabsHolder
        local tabTitle = Instance.new("TextLabel")
        tabTitle.Name = "TabTitle"
        tabTitle.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
        tabTitle.Text = Tab.Name
        tabTitle.TextColor3 = Color3.fromRGB(180, 180, 180)
        tabTitle.TextSize = 14
        tabTitle.TextWrapped = true
        tabTitle.TextXAlignment = Enum.TextXAlignment.Left
        tabTitle.AutomaticSize = Enum.AutomaticSize.X
        tabTitle.BackgroundColor3 = Color3.fromRGB(52,171,47)
        tabTitle.BackgroundTransparency = 1
        tabTitle.Size = UDim2.fromOffset(0, 15)
        tabTitle.Parent = tabBtn
        local frame = Instance.new("Frame")
        frame.Name = "Frame"
        frame.BackgroundColor3 = Color3.fromRGB(52,171,47)
        frame.BackgroundTransparency = 1
        frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
        frame.BorderSizePixel = 0
        frame.Size = UDim2.fromScale(0.5, 1)
        frame.Parent = tabTitle
        local function createTabBtnIndicator()
            local indicator = Instance.new("Frame")
            indicator.Name = "TabBtnIndicator"
            indicator.AnchorPoint = Vector2.new(0, 1)
            indicator.BackgroundColor3 = Color3.fromRGB(52,171,47)
            indicator.BorderSizePixel = 0
            indicator.Position = UDim2.new(0, 1, 1, 10)
            local barWidth = math.max(tabTitle.TextBounds.X / 2, 15)
            local barHeight = 4
            indicator.Size = UDim2.fromOffset(barWidth, barHeight)
            local uICorner = Instance.new("UICorner")
            uICorner.Name = "UICorner"
            uICorner.CornerRadius = UDim.new(1, 0)
            uICorner.Parent = indicator
            local imageLabel = Instance.new("ImageLabel")
            imageLabel.Name = "TabBtnGlow"
            imageLabel.Image = "rbxassetid://14090692760"
            imageLabel.ImageColor3 = Color3.fromRGB(52,171,47)
            imageLabel.BackgroundColor3 = Color3.fromRGB(52,171,47)
            imageLabel.BackgroundTransparency = 1
            imageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
            imageLabel.BorderSizePixel = 0
            imageLabel.ZIndex = 4
            imageLabel.Parent = Library.ScreenGUI
            indicator.Parent = frame
            local function updateGlowPositionAndSize()
                local absPos = indicator.AbsolutePosition
                local absSize = indicator.AbsoluteSize
                imageLabel.Position = UDim2.fromOffset(absPos.X - (absSize.X * 1.25), absPos.Y - (absSize.Y * 2.5))
                imageLabel.Size = UDim2.fromOffset(absSize.X * 3.5, absSize.Y * 6)
            end
            indicator:GetPropertyChangedSignal("AbsolutePosition"):Connect(updateGlowPositionAndSize)
            indicator:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateGlowPositionAndSize)
            updateGlowPositionAndSize()
            indicator.Visible = false
            imageLabel.Visible = false
            return indicator, imageLabel
        end
        local tabBtnIndicator, tabBtnGlow = createTabBtnIndicator()
        local uiScale = Instance.new("UIScale")
        uiScale.Scale = 1
        uiScale.Parent = tabBtn
        local elements = Instance.new("ScrollingFrame")
        elements.Name = "Elements"
        elements.AutomaticCanvasSize = Enum.AutomaticSize.Y
        elements.CanvasSize = UDim2.fromOffset(0, 527)
        elements.HorizontalScrollBarInset = Enum.ScrollBarInset.Always
        elements.ScrollBarThickness = 4
        elements.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 80)
        elements.ScrollBarImageTransparency = 0
        elements.BackgroundColor3 = Color3.fromRGB(52,171,47)
        elements.BackgroundTransparency = 1
        elements.BorderColor3 = Color3.fromRGB(0, 0, 0)
        elements.BorderSizePixel = 0
        elements.LayoutOrder = 1
        elements.Position = UDim2.fromScale(0.248, 0.0518)
        elements.Selectable = false
        elements.Visible = false
        elements.Size = UDim2.new(1, 0, 1, - 22)
        elements.Parent = body
        local uIFlexItem = Instance.new("UIFlexItem")
        uIFlexItem.Name = "UIFlexItem"
        uIFlexItem.FlexMode = Enum.UIFlexMode.Shrink
        uIFlexItem.Parent = elements
        local actualtab = Instance.new("Frame")
        actualtab.Name = "actualtab"
        actualtab.AnchorPoint = Vector2.new(0.5, 0)
        actualtab.AutomaticSize = Enum.AutomaticSize.Y
        actualtab.BackgroundColor3 = Color3.fromRGB(52,171,47)
        actualtab.BackgroundTransparency = 1
        actualtab.BorderColor3 = Color3.fromRGB(0, 0, 0)
        actualtab.BorderSizePixel = 0
        actualtab.Position = UDim2.new(0.5, 0, 0, 10)
        actualtab.Size = UDim2.new(1, - 20, 1, - 20)
        actualtab.Parent = elements
        local var_unknown = Instance.new("UIListLayout")
        var_unknown.Name = "_"
        var_unknown.HorizontalFlex = Enum.UIFlexAlignment.Fill
        var_unknown.SortOrder = Enum.SortOrder.LayoutOrder
        var_unknown.Parent = actualtab
        local content = Instance.new("Frame")
        content.Name = "content"
        content.AutomaticSize = Enum.AutomaticSize.Y
        content.BackgroundColor3 = Color3.fromRGB(52,171,47)
        content.BackgroundTransparency = 1
        content.BorderColor3 = Color3.fromRGB(0, 0, 0)
        content.BorderSizePixel = 0
        content.Position = UDim2.fromOffset(0, 32)
        content.Size = UDim2.fromScale(1, 0)
        content.Parent = actualtab
        local var_unknown1 = Instance.new("UIListLayout")
        var_unknown1.Name = "_"
        var_unknown1.HorizontalFlex = Enum.UIFlexAlignment.Fill
        var_unknown1.Padding = UDim.new(0, 16)
        var_unknown1.FillDirection = Enum.FillDirection.Horizontal
        var_unknown1.SortOrder = Enum.SortOrder.LayoutOrder
        var_unknown1.Parent = content
        local column = Instance.new("Frame")
        column.Name = "column"
        column.AutomaticSize = Enum.AutomaticSize.Y
        column.BackgroundColor3 = Color3.fromRGB(52,171,47)
        column.BackgroundTransparency = 1
        column.BorderColor3 = Color3.fromRGB(0, 0, 0)
        column.BorderSizePixel = 0
        column.Parent = content
        local var_unknown2 = Instance.new("UIListLayout")
        var_unknown2.Name = "_"
        var_unknown2.HorizontalFlex = Enum.UIFlexAlignment.Fill
        var_unknown2.Padding = UDim.new(0, 16)
        var_unknown2.Parent = column
        function Tab.Turn(self, bool)
            Tab.Open = bool
            local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            if bool then
                TweenService:Create(uiScale, tweenInfo, {
                    Scale = 1
                }):Play()
                tabBtnIndicator.Visible = true
                tabBtnGlow.Visible = true
                TweenService:Create(tabBtnIndicator, tweenInfo, {
                    Size = UDim2.fromOffset(math.max(tabTitle.TextBounds.X / 2, 15), 4),
                }):Play()
                TweenService:Create(tabBtnGlow, tweenInfo, {
                    ImageColor3 = Color3.fromRGB(52,171,47),
                    Size = UDim2.fromScale(3.5, 6),
                }):Play()
                TweenService:Create(tabTitle, tweenInfo, {
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
                elements.Visible = true
            else
                TweenService:Create(uiScale, tweenInfo, {
                    Scale = 1
                }):Play()
                tabBtnIndicator.Visible = false
                tabBtnGlow.Visible = false
                TweenService:Create(tabTitle, tweenInfo, {
                    TextColor3 = Color3.fromRGB(180, 180, 180),
                }):Play()
                elements.Visible = false
            end
        end
        tabBtn.MouseButton1Click:Connect(function()
            if not Tab.Open then
                for _, otherTab in pairs(Window.Tabs) do
                    if otherTab.Open and otherTab ~= Tab then
                        otherTab:Turn(false)
                    end
                end
                Tab:Turn(true)
            end
        end)
        tabBtn.MouseEnter:Connect(function()
            if not Tab.Open then
                TweenService:Create(uiScale, TweenInfo.new(0.15), {
                    Scale = 1.03
                }):Play()
            end
        end)
        tabBtn.MouseLeave:Connect(function()
            if not Tab.Open then
                TweenService:Create(uiScale, TweenInfo.new(0.15), {
                    Scale = 1
                }):Play()
            end
        end)
        Tab.Elements = {
            Left = nil,
            Right = nil,
            TabButton = tabBtn,
            Content = column,
            Indicator = tabBtnIndicator,
            Glow = tabBtnGlow,
        }
        if # Window.Tabs == 0 then
            Tab:Turn(true)
        end
        Window.Tabs[# Window.Tabs + 1] = Tab
        return setmetatable(Tab, Library.Tabs)
    end
    function Tabs.Section(self, Properties)
        if not Properties then
            Properties = {}
        end
        self.SectionCount = (self.SectionCount or 0) + 1
        local Section = {
            Name = Properties.Name or "Section",
            Tab = self,
            Elements = {},
        }
        local sectionfreme = Instance.new("Frame")
        sectionfreme.Name = "sectionfreme"
        sectionfreme.AutomaticSize = Enum.AutomaticSize.Y
        sectionfreme.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        sectionfreme.BorderColor3 = Color3.fromRGB(0, 0, 0)
        sectionfreme.BorderSizePixel = 0
        sectionfreme.Position = UDim2.fromScale(- 4.0200000000000005E-3, 0)
        sectionfreme.Size = UDim2.new(1, 0, 3.02, 12)
        sectionfreme.Parent = Section.Tab.Elements.Content
        local uIListLayout = Instance.new("UIListLayout")
        uIListLayout.Name = "UIListLayout"
        uIListLayout.Padding = UDim.new(0, 8)
        uIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        uIListLayout.Parent = sectionfreme
        local uIPadding = Instance.new("UIPadding")
        uIPadding.Name = "UIPadding"
        uIPadding.PaddingBottom = UDim.new(0, 12)
        uIPadding.PaddingTop = UDim.new(0, 5)
        uIPadding.Parent = sectionfreme
        local uIStroke = Instance.new("UIStroke")
        uIStroke.Name = "UIStroke"
        uIStroke.Color = Color3.fromRGB(52,171,47)
        uIStroke.Transparency = 0.5
        uIStroke.Parent = sectionfreme
        local uICorner = Instance.new("UICorner")
        uICorner.Name = "UICorner"
        uICorner.CornerRadius = UDim.new(0, 6)
        uICorner.Parent = sectionfreme
        local header = Instance.new("Frame")
        header.Name = "Header"
        header.BackgroundColor3 = Color3.fromRGB(52,171,47)
        header.BackgroundTransparency = 1
        header.BorderColor3 = Color3.fromRGB(0, 0, 0)
        header.BorderSizePixel = 0
        header.Size = UDim2.new(1, 0, 0, 30)
        header.Parent = sectionfreme
        local line = Instance.new("Frame")
        line.Name = "Line"
        line.AnchorPoint = Vector2.new(0, 1)
        line.BackgroundColor3 = Color3.fromRGB(45, 42, 47)
        line.BorderColor3 = Color3.fromRGB(0, 0, 0)
        line.BorderSizePixel = 0
        line.Position = UDim2.fromScale(0, 1)
        line.Size = UDim2.new(1, 0, 0, 1)
        line.Parent = header
        local sectionname = Instance.new("TextLabel")
        sectionname.Name = "sectionname"
        sectionname.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
        sectionname.Text = Section.Name or "Section"
        sectionname.TextColor3 = Color3.fromRGB(52,171,47)
        sectionname.TextSize = 14
        sectionname.AutomaticSize = Enum.AutomaticSize.X
        sectionname.BackgroundColor3 = Color3.fromRGB(52,171,47)
        sectionname.BackgroundTransparency = 1
        sectionname.BorderColor3 = Color3.fromRGB(0, 0, 0)
        sectionname.BorderSizePixel = 0
        sectionname.Position = UDim2.fromOffset(7, 0)
        sectionname.Size = UDim2.fromScale(0, 1)
        sectionname.Parent = header
        local sectionTitlePadding = Instance.new("UIPadding")
        sectionTitlePadding.Name = "SectionTitlePadding"
        sectionTitlePadding.PaddingBottom = UDim.new(0, 4)
        sectionTitlePadding.PaddingLeft = UDim.new(0, 4)
        sectionTitlePadding.Parent = sectionname
        Section.Elements.SectionContent = sectionfreme
        self.Sections = self.Sections or {}
        table.insert(self.Sections, Section)
        return setmetatable(Section, Library.Sections)
    end
    function Sections.Toggle(self, Properties)
        if not Properties then
            Properties = {}
        end
        local Toggle = {
            Section = self,
            Name = Properties.Name or "Toggle",
            State = Properties.State or Properties.state or Properties.Default or Properties.default or false,
            Callback = Properties.Callback or Properties.callback or function()
            end,
            Flag = Properties.Flag or Properties.flag or Library.NextFlag(),
        }
        local toggleBtn = Instance.new("TextButton")
        toggleBtn.Name = "unactivetoggle"
        toggleBtn.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
        toggleBtn.Text = ""
        toggleBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
        toggleBtn.TextSize = 1
        toggleBtn.AutoButtonColor = false
        toggleBtn.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        toggleBtn.BorderColor3 = Color3.fromRGB(0, 0, 0)
        toggleBtn.BorderSizePixel = 0
        toggleBtn.Size = UDim2.new(1, - 12, 0, 40)
        toggleBtn.Parent = self.Elements.SectionContent
        local textLabel = Instance.new("TextLabel")
        textLabel.Name = "TextLabel"
        textLabel.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        textLabel.Text = Toggle.Name
        textLabel.TextColor3 = Color3.fromRGB(52,171,47)
        textLabel.TextSize = 14
        textLabel.TextStrokeColor3 = Color3.fromRGB(52,171,47)
        textLabel.AutomaticSize = Enum.AutomaticSize.X
        textLabel.BackgroundColor3 = Color3.fromRGB(52,171,47)
        textLabel.BackgroundTransparency = 1
        textLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
        textLabel.BorderSizePixel = 0
        textLabel.Position = UDim2.fromOffset(10, 0)
        textLabel.Size = UDim2.fromScale(0, 1)
        textLabel.Parent = toggleBtn
        local uICorner = Instance.new("UICorner")
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = toggleBtn
        local frame = Instance.new("Frame")
        frame.Name = "Frame"
        frame.AnchorPoint = Vector2.new(1, 0.5)
        frame.BackgroundColor3 = Color3.fromRGB(53, 50, 55)
        frame.BackgroundTransparency = 1
        frame.BorderSizePixel = 0
        frame.Position = UDim2.new(1, - 15, 0.5, 0)
        frame.Size = UDim2.fromOffset(40, 22)
        frame.Parent = toggleBtn
        local uICorner1 = Instance.new("UICorner")
        uICorner1.CornerRadius = UDim.new(0, 764)
        uICorner1.Parent = frame
        local circle = Instance.new("Frame")
        circle.Name = "ImageLabel"
        circle.AnchorPoint = Vector2.new(0, 0.5)
        circle.BackgroundColor3 = Color3.fromRGB(72, 67, 77)
        circle.BorderSizePixel = 0
        circle.Position = UDim2.new(0, 5, 0.5, 0)
        circle.Size = UDim2.fromOffset(12, 12)
        circle.Parent = frame
        local uICorner2 = Instance.new("UICorner")
        uICorner2.CornerRadius = UDim.new(0, 64)
        uICorner2.Parent = circle
        local imageLabel1
        local stroke = Instance.new("UIStroke")
        stroke.Color = Color3.fromRGB(53, 50, 55)
        stroke.Parent = frame
        function Toggle:Set(state)
            self.State = state
            Library.Flags[self.Flag] = state
            local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            if state then
                TweenService:Create(frame, tweenInfo, {
                    BackgroundTransparency = 0
                }):Play()
                TweenService:Create(circle, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(109, 106, 113),
                    Position = UDim2.new(0.5, 3, 0.5, 0),
                }):Play()
                TweenService:Create(textLabel, tweenInfo, {
                    TextColor3 = Color3.fromRGB(52,171,47)
                }):Play()
                if not imageLabel1 then
                    delay(0.13, function()
                        if self.State and not imageLabel1 then
                            imageLabel1 = Instance.new("ImageLabel")
                            imageLabel1.Image = "rbxassetid://14090692760"
                            imageLabel1.ImageColor3 = Color3.fromRGB(109, 106, 113)
                            imageLabel1.BackgroundTransparency = 1
                            imageLabel1.Position = UDim2.fromScale(0.1, - 0.567)
                            imageLabel1.Size = UDim2.fromScale(1.25, 2.07)
                            imageLabel1.ZIndex = 4
                            imageLabel1.Parent = frame
                        end
                    end)
                end
                if stroke then
                    stroke:Destroy()
                end
            else
                TweenService:Create(frame, tweenInfo, {
                    BackgroundTransparency = 1
                }):Play()
                TweenService:Create(circle, tweenInfo, {
                    BackgroundColor3 = Color3.fromRGB(72, 67, 77),
                    Position = UDim2.new(0, 5, 0.5, 0),
                }):Play()
                TweenService:Create(textLabel, tweenInfo, {
                    TextColor3 = Color3.fromRGB(52,171,47)
                }):Play()
                if imageLabel1 then
                    imageLabel1:Destroy()
                    imageLabel1 = nil
                end
                if not frame:FindFirstChildOfClass("UIStroke") then
                    local newStroke = Instance.new("UIStroke")
                    newStroke.Color = Color3.fromRGB(53, 50, 55)
                    newStroke.Parent = frame
                end
            end
            if typeof(self.Callback) == "function" then
                self.Callback(state)
            end
        end
        toggleBtn.MouseButton1Click:Connect(function()
            Toggle:Set(not Toggle.State)
        end)
        Toggle:Set(Toggle.State)
        Library.Flags[Toggle.Flag] = Toggle.State
        return Toggle
    end
    function Sections.MultiDropdown(self, Properties)
        local Dropdown = {
            Name = Properties.Name or "MultiDropdown",
            Options = Properties.Options or {},
            Default = Properties.Default or {},
            Flag = Properties.Flag or Library.NextFlag(),
            Callback = Properties.Callback or function()
            end,
            zIndex = Properties.zindex or Properties.Zindex or 6544,
            Section = self,
            OptionInsts = {},
        }
        local chosen = {}
        local dropdownfreme = Instance.new("TextButton")
        dropdownfreme.Name = "Dropdownfreme"
        dropdownfreme.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
        dropdownfreme.Text = ""
        dropdownfreme.TextColor3 = Color3.fromRGB(0, 0, 0)
        dropdownfreme.TextSize = 1
        dropdownfreme.ZIndex = Dropdown.zIndex
        dropdownfreme.AutoButtonColor = false
        dropdownfreme.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        dropdownfreme.BorderColor3 = Color3.fromRGB(0, 0, 0)
        dropdownfreme.BorderSizePixel = 0
        dropdownfreme.Size = UDim2.new(1, - 12, 0, 40)
        dropdownfreme.Parent = Dropdown.Section.Elements.SectionContent
        local dropdownname = Instance.new("TextLabel")
        dropdownname.Name = "Dropdownname"
        dropdownname.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        dropdownname.Text = Dropdown.Name
        dropdownname.TextColor3 = Color3.fromRGB(52,171,47)
        dropdownname.TextSize = 14
        dropdownname.AutomaticSize = Enum.AutomaticSize.X
        dropdownname.BackgroundTransparency = 1
        dropdownname.Position = UDim2.fromOffset(10, 0)
        dropdownname.Size = UDim2.fromScale(0, 1)
        dropdownname.Parent = dropdownfreme
        local uICorner = Instance.new("UICorner")
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = dropdownfreme
        local dropdowncurrentframe = Instance.new("Frame")
        dropdowncurrentframe.Name = "Dropdowncurrentframe"
        dropdowncurrentframe.AnchorPoint = Vector2.new(1, 0.5)
        dropdowncurrentframe.AutomaticSize = Enum.AutomaticSize.X
        dropdowncurrentframe.BackgroundTransparency = 1
        dropdowncurrentframe.Position = UDim2.new(1, - 15, 0.5, 0)
        dropdowncurrentframe.Size = UDim2.fromOffset(0, 22)
        dropdowncurrentframe.Parent = dropdownfreme
        Instance.new("UICorner", dropdowncurrentframe).CornerRadius = UDim.new(0, 6)
        Instance.new("UIPadding", dropdowncurrentframe).PaddingLeft = UDim.new(0, 5)
        local right = Instance.new("Frame")
        right.Name = "Right"
        right.AnchorPoint = Vector2.new(1, 0.5)
        right.BackgroundTransparency = 1
        right.Position = UDim2.new(1, - 5, 0.5, 0)
        right.Size = UDim2.new(0, 15, 1, 0)
        right.Parent = dropdowncurrentframe
        local dropdownIcon = Instance.new("ImageLabel")
        dropdownIcon.Name = "DropdownIcon"
        dropdownIcon.Image = "rbxassetid://115894980866040"
        dropdownIcon.ImageColor3 = Color3.fromRGB(72, 67, 77)
        dropdownIcon.AnchorPoint = Vector2.new(0.5, 0.5)
        dropdownIcon.BackgroundTransparency = 1
        dropdownIcon.Position = UDim2.fromScale(0.5, 0.5)
        dropdownIcon.Size = UDim2.fromOffset(14, 14)
        dropdownIcon.ZIndex = 4
        dropdownIcon.Parent = right
        local left = Instance.new("Frame")
        left.Name = "Left"
        left.AutomaticSize = Enum.AutomaticSize.X
        left.BackgroundTransparency = 1
        left.Size = UDim2.fromScale(0, 1)
        left.Parent = dropdowncurrentframe
        local dropdownCurrenttext = Instance.new("TextLabel")
        dropdownCurrenttext.Name = "DropdownCurrenttext"
        dropdownCurrenttext.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
        dropdownCurrenttext.Text = "none"
        dropdownCurrenttext.TextColor3 = Color3.fromRGB(52,171,47)
        dropdownCurrenttext.TextSize = 12
        dropdownCurrenttext.TextWrapped = true
        dropdownCurrenttext.AutomaticSize = Enum.AutomaticSize.X
        dropdownCurrenttext.BackgroundTransparency = 1
        dropdownCurrenttext.Size = UDim2.fromScale(1, 1)
        dropdownCurrenttext.Parent = left
        local uIListLayout = Instance.new("UIListLayout")
        uIListLayout.Padding = UDim.new(0, 3)
        uIListLayout.FillDirection = Enum.FillDirection.Horizontal
        uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        uIListLayout.Parent = dropdowncurrentframe
        Instance.new("UIStroke", dropdowncurrentframe).Color = Color3.fromRGB(53, 50, 55)
        local dropdownList = Instance.new("Frame")
        dropdownList.Name = "DropdownList"
        dropdownList.AnchorPoint = Vector2.new(1, 0)
        dropdownList.AutomaticSize = Enum.AutomaticSize.Y
        dropdownList.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        dropdownList.Position = UDim2.fromScale(0.964, 1)
        dropdownList.Size = UDim2.fromOffset(120, 78)
        dropdownList.Visible = false
        dropdownList.ZIndex = 56
        dropdownList.Parent = dropdownfreme
        local optionHolder = Instance.new("ScrollingFrame")
        optionHolder.Name = "OptionHolder"
        optionHolder.AutomaticCanvasSize = Enum.AutomaticSize.Y
        optionHolder.ScrollBarThickness = 0
        optionHolder.AutomaticSize = Enum.AutomaticSize.Y
        optionHolder.BackgroundTransparency = 1
        optionHolder.Size = UDim2.fromScale(1, 1)
        optionHolder.ZIndex = 56
        optionHolder.Parent = dropdownList
        Instance.new("UICorner", optionHolder).CornerRadius = UDim.new(0, 4)
        local uIListLayout1 = Instance.new("UIListLayout")
        uIListLayout1.Padding = UDim.new(0, 6)
        uIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
        uIListLayout1.Parent = optionHolder
        Instance.new("UIPadding", optionHolder).PaddingTop = UDim.new(0, 5)
        Instance.new("UICorner", dropdownList).CornerRadius = UDim.new(0, 6)
        Instance.new("UIStroke", dropdownList).Color = Color3.fromRGB(53, 50, 55)
        local function createOption(name)
            local option = Instance.new("TextLabel")
            option.Name = name
            option.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
            option.Text = name
            option.TextColor3 = Color3.fromRGB(69, 75, 91)
            option.TextSize = 12
            option.TextWrapped = true
            option.TextXAlignment = Enum.TextXAlignment.Left
            option.BackgroundColor3 = Color3.fromRGB(29, 30, 42)
            option.BackgroundTransparency = 1
            option.Size = UDim2.new(1, 0, 0, 20)
            local uIPadding = Instance.new("UIPadding")
            uIPadding.PaddingLeft = UDim.new(0, 8)
            uIPadding.Parent = option
            local textButton = Instance.new("TextButton")
            textButton.Name = "TextButton"
            textButton.Text = ""
            textButton.BackgroundTransparency = 1
            textButton.Size = UDim2.fromScale(1, 1)
            textButton.ZIndex = 15
            textButton.Parent = option
            option.Parent = optionHolder
            Dropdown.OptionInsts[name] = {
                button = textButton,
                text = option
            }
            textButton.Activated:Connect(function()
                if not table.find(chosen, name) then
                    table.insert(chosen, name)
                    TweenService:Create(option, TweenInfo.new(0.15), {
                        TextColor3 = Library.Accent,
                    }):Play()
                else
                    table.remove(chosen, table.find(chosen, name))
                    TweenService:Create(option, TweenInfo.new(0.15), {
                        TextColor3 = Color3.fromRGB(69, 75, 91),
                    }):Play()
                end
                dropdownCurrenttext.Text = # chosen > 0 and table.concat(chosen, ", ") or "none"
                Library.Flags[Dropdown.Flag] = chosen
                Dropdown.Callback(chosen)
            end)
        end
        dropdownfreme.MouseButton1Click:Connect(function()
            dropdownList.Visible = not dropdownList.Visible
        end)
        game:GetService("UserInputService").InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                if dropdownList.Visible and not Library:IsMouseOverFrame(dropdownList) and not Library:IsMouseOverFrame(dropdownfreme) then
                    dropdownList.Visible = false
                end
            end
        end)
        for _, option in ipairs(Dropdown.Options) do
            createOption(option)
        end
         
        		-- Handle default values
        if type(Dropdown.Default) == "table" then
            for _, defaultVal in ipairs(Dropdown.Default) do
                table.insert(chosen, defaultVal)
                if Dropdown.OptionInsts[defaultVal] then
                    Dropdown.OptionInsts[defaultVal].text.TextColor3 = Library.Accent
                end
            end
            dropdownCurrenttext.Text = table.concat(chosen, ", ")
        end
        Library.Flags[Dropdown.Flag] = chosen
        Dropdown.Callback(chosen)
        function Dropdown.Refresh(self, tbl)
            if type(tbl) ~= "table" then
                tbl = {
                    tbl
                }
            end
            for _, opt in next, Dropdown.OptionInsts do
                opt.text:Destroy()
            end
            table.clear(Dropdown.OptionInsts)
            table.clear(chosen)
            for _, option in ipairs(tbl) do
                createOption(option)
            end
            dropdownCurrenttext.Text = "none"
            Library.Flags[Dropdown.Flag] = chosen
            Dropdown.Callback(chosen)
        end
        return Dropdown
    end
    function Sections.Dropdown(self, Properties)
        local Dropdown = {
            Name = Properties.Name or "Dropdown",
            Options = Properties.Options or {},
            Default = Properties.Default or "no default",
            Max = Properties.Max,
            ScrollMax = Properties.ScrollMax,
            Flag = Properties.Flag or Library.NextFlag(),
            Callback = Properties.Callback or function()
            end,
            zIndex = Properties.zindex or Properties.Zindex or 6544,
            Section = self,
            OptionInsts = {},
        }
        local dropdownfreme = Instance.new("TextButton")
        dropdownfreme.Name = "Dropdownfreme"
        dropdownfreme.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
        dropdownfreme.Text = ""
        dropdownfreme.TextColor3 = Color3.fromRGB(0, 0, 0)
        dropdownfreme.TextSize = 1
        dropdownfreme.ZIndex = Dropdown.zIndex
        dropdownfreme.AutoButtonColor = false
        dropdownfreme.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        dropdownfreme.BorderColor3 = Color3.fromRGB(0, 0, 0)
        dropdownfreme.BorderSizePixel = 0
        dropdownfreme.Size = UDim2.new(1, - 12, 0, 40)
        dropdownfreme.Parent = Dropdown.Section.Elements.SectionContent
        local dropdownname = Instance.new("TextLabel")
        dropdownname.Name = "Dropdownname"
        dropdownname.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        dropdownname.Text = Dropdown.Name
        dropdownname.TextColor3 = Color3.fromRGB(52,171,47)
        dropdownname.TextSize = 14
        dropdownname.TextStrokeColor3 = Color3.fromRGB(52,171,47)
        dropdownname.AutomaticSize = Enum.AutomaticSize.X
        dropdownname.BackgroundColor3 = Color3.fromRGB(52,171,47)
        dropdownname.BackgroundTransparency = 1
        dropdownname.BorderColor3 = Color3.fromRGB(0, 0, 0)
        dropdownname.BorderSizePixel = 0
        dropdownname.Position = UDim2.fromOffset(10, 0)
        dropdownname.Size = UDim2.fromScale(0, 1)
        dropdownname.Parent = dropdownfreme
        local uICorner = Instance.new("UICorner")
        uICorner.Name = "UICorner"
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = dropdownfreme
        local dropdowncurrentframe = Instance.new("Frame")
        dropdowncurrentframe.Name = "Dropdowncurrentframe"
        dropdowncurrentframe.AnchorPoint = Vector2.new(1, 0.5)
        dropdowncurrentframe.AutomaticSize = Enum.AutomaticSize.X
        dropdowncurrentframe.BackgroundColor3 = Color3.fromRGB(52,171,47)
        dropdowncurrentframe.BackgroundTransparency = 1
        dropdowncurrentframe.BorderColor3 = Color3.fromRGB(0, 0, 0)
        dropdowncurrentframe.BorderSizePixel = 0
        dropdowncurrentframe.Position = UDim2.new(1, - 15, 0.5, 0)
        dropdowncurrentframe.Size = UDim2.fromOffset(0, 22)
        dropdowncurrentframe.Parent = dropdownfreme
        local uICorner1 = Instance.new("UICorner")
        uICorner1.Name = "UICorner"
        uICorner1.CornerRadius = UDim.new(0, 6)
        uICorner1.Parent = dropdowncurrentframe
        local uIPadding = Instance.new("UIPadding")
        uIPadding.Name = "UIPadding"
        uIPadding.PaddingLeft = UDim.new(0, 5)
        uIPadding.PaddingRight = UDim.new(0, 5)
        uIPadding.PaddingTop = UDim.new(0, 1)
        uIPadding.Parent = dropdowncurrentframe
        local right = Instance.new("Frame")
        right.Name = "Right"
        right.AnchorPoint = Vector2.new(1, 0.5)
        right.BackgroundColor3 = Color3.fromRGB(52,171,47)
        right.BackgroundTransparency = 1
        right.BorderColor3 = Color3.fromRGB(0, 0, 0)
        right.BorderSizePixel = 0
        right.LayoutOrder = 1
        right.Position = UDim2.new(1, - 5, 0.5, 0)
        right.Size = UDim2.new(0, 15, 1, 0)
        right.Parent = dropdowncurrentframe
        local dropdownIcon = Instance.new("ImageLabel")
        dropdownIcon.Name = "DropdownIcon"
        dropdownIcon.Image = "rbxassetid://115894980866040"
        dropdownIcon.ImageColor3 = Color3.fromRGB(72, 67, 77)
        dropdownIcon.AnchorPoint = Vector2.new(0.5, 0.5)
        dropdownIcon.BackgroundColor3 = Color3.fromRGB(52,171,47)
        dropdownIcon.BackgroundTransparency = 1
        dropdownIcon.BorderColor3 = Color3.fromRGB(0, 0, 0)
        dropdownIcon.BorderSizePixel = 0
        dropdownIcon.Position = UDim2.fromScale(0.5, 0.5)
        dropdownIcon.Size = UDim2.fromOffset(14, 14)
        dropdownIcon.ZIndex = 4
        dropdownIcon.Parent = right
        local left = Instance.new("Frame")
        left.Name = "Left"
        left.AutomaticSize = Enum.AutomaticSize.X
        left.BackgroundColor3 = Color3.fromRGB(52,171,47)
        left.BackgroundTransparency = 1
        left.BorderColor3 = Color3.fromRGB(0, 0, 0)
        left.BorderSizePixel = 0
        left.Size = UDim2.fromScale(0, 1)
        left.Parent = dropdowncurrentframe
        local dropdownCurrenttext = Instance.new("TextLabel")
        dropdownCurrenttext.Name = "DropdownCurrenttext"
        dropdownCurrenttext.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
        dropdownCurrenttext.Text = Dropdown.Default
        dropdownCurrenttext.TextColor3 = Color3.fromRGB(52,171,47)
        dropdownCurrenttext.TextSize = 12
        dropdownCurrenttext.TextWrapped = true
        dropdownCurrenttext.Active = true
        dropdownCurrenttext.AutomaticSize = Enum.AutomaticSize.X
        dropdownCurrenttext.BackgroundColor3 = Color3.fromRGB(52,171,47)
        dropdownCurrenttext.BackgroundTransparency = 1
        dropdownCurrenttext.BorderColor3 = Color3.fromRGB(0, 0, 0)
        dropdownCurrenttext.Selectable = true
        dropdownCurrenttext.Size = UDim2.fromScale(1, 1)
        dropdownCurrenttext.Parent = left
        local uIListLayout = Instance.new("UIListLayout")
        uIListLayout.Name = "UIListLayout"
        uIListLayout.Padding = UDim.new(0, 3)
        uIListLayout.FillDirection = Enum.FillDirection.Horizontal
        uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        uIListLayout.Parent = dropdowncurrentframe
        local uIStroke = Instance.new("UIStroke")
        uIStroke.Name = "UIStroke"
        uIStroke.Color = Color3.fromRGB(53, 50, 55)
        uIStroke.Parent = dropdowncurrentframe
        local dropdownList = Instance.new("Frame")
        dropdownList.Name = "DropdownList"
        dropdownList.AnchorPoint = Vector2.new(1, 0)
        dropdownList.AutomaticSize = Enum.AutomaticSize.Y
        dropdownList.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        dropdownList.BorderColor3 = Color3.fromRGB(0, 0, 0)
        dropdownList.BorderSizePixel = 0
        dropdownList.Position = UDim2.fromScale(0.964, 1)
        dropdownList.Size = UDim2.fromOffset(120, 78)
        dropdownList.Visible = false
        dropdownList.ZIndex = 56
        dropdownList.Parent = dropdownfreme
        local optionHolder = Instance.new("ScrollingFrame")
        optionHolder.Name = "OptionHolder"
        optionHolder.AutomaticCanvasSize = Enum.AutomaticSize.Y
        optionHolder.ScrollBarThickness = 0
        optionHolder.AutomaticSize = Enum.AutomaticSize.Y
        optionHolder.BackgroundColor3 = Color3.fromRGB(28, 29, 32)
        optionHolder.BackgroundTransparency = 1
        optionHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
        optionHolder.BorderSizePixel = 0
        optionHolder.Selectable = false
        optionHolder.Size = UDim2.fromScale(1, 1)
        optionHolder.ZIndex = 56
        optionHolder.Parent = dropdownList
        local uICorner2 = Instance.new("UICorner")
        uICorner2.Name = "UICorner"
        uICorner2.CornerRadius = UDim.new(0, 4)
        uICorner2.Parent = optionHolder
        local uIListLayout1 = Instance.new("UIListLayout")
        uIListLayout1.Name = "UIListLayout"
        uIListLayout1.Padding = UDim.new(0, 6)
        uIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
        uIListLayout1.Parent = optionHolder
        local uIPadding1 = Instance.new("UIPadding")
        uIPadding1.Name = "UIPadding"
        uIPadding1.PaddingBottom = UDim.new(0, 5)
        uIPadding1.PaddingTop = UDim.new(0, 5)
        uIPadding1.Parent = optionHolder
        local uICorner3 = Instance.new("UICorner")
        uICorner3.Name = "UICorner"
        uICorner3.CornerRadius = UDim.new(0, 6)
        uICorner3.Parent = dropdownList
        local uIStroke1 = Instance.new("UIStroke")
        uIStroke1.Name = "UIStroke"
        uIStroke1.Color = Color3.fromRGB(53, 50, 55)
        uIStroke1.Parent = dropdownList
        Dropdown.OptionInsts = {}
        local chosen = Dropdown.Max and {} or nil
        local function createOption(name)
            local option = Instance.new("TextLabel")
            option.Name = name
            option.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
            option.Text = name
            option.TextColor3 = Color3.fromRGB(69, 75, 91)
            option.TextSize = 12
            option.TextWrapped = true
            option.TextXAlignment = Enum.TextXAlignment.Left
            option.BackgroundColor3 = Color3.fromRGB(29, 30, 42)
            option.BackgroundTransparency = 1
            option.BorderSizePixel = 0
            option.ClipsDescendants = true
            option.Size = UDim2.new(1, 0, 0, 20)
            local uIPadding = Instance.new("UIPadding")
            uIPadding.Name = "UIPadding"
            uIPadding.PaddingLeft = UDim.new(0, 8)
            uIPadding.Parent = option
            local textButton = Instance.new("TextButton")
            textButton.Name = "TextButton"
            textButton.Text = ""
            textButton.BackgroundTransparency = 1
            textButton.Size = UDim2.fromScale(1, 1)
            textButton.ZIndex = 15
            textButton.Parent = option
            option.Parent = optionHolder
            Dropdown.OptionInsts[name] = {
                button = textButton,
                text = option
            }
            textButton.Activated:Connect(function()
                if Dropdown.Max then
                    local index = table.find(chosen, name)
                    if index then
                        table.remove(chosen, index)
                        TweenService:Create(option, TweenInfo.new(0.15), {
                            TextColor3 = Color3.fromRGB(69, 75, 91),
                        }):Play()
                    elseif # chosen < Dropdown.Max then
                        table.insert(chosen, name)
                        TweenService:Create(option, TweenInfo.new(0.15), {
                            TextColor3 = Library.Accent,
                        }):Play()
                    end
                    dropdownCurrenttext.Text = table.concat(chosen, ", ")
                else
                    chosen = name
                    dropdownCurrenttext.Text = name
                    for optName, inst in pairs(Dropdown.OptionInsts) do
                        TweenService:Create(inst.text, TweenInfo.new(0.15), {
                            TextColor3 = optName == name and Library.Accent or Color3.fromRGB(69, 75, 91),
                        }):Play()
                    end
                    dropdownList.Visible = false
                end
                Library.Flags[Dropdown.Flag] = chosen
                Dropdown.Callback(chosen)
            end)
        end
        dropdownfreme.MouseButton1Click:Connect(function()
            dropdownList.Visible = not dropdownList.Visible
        end)
        game:GetService("UserInputService").InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                if dropdownList.Visible and not Library:IsMouseOverFrame(dropdownList) and not Library:IsMouseOverFrame(dropdownfreme) then
                    dropdownList.Visible = false
                end
            end
        end)
        for _, option in ipairs(Dropdown.Options) do
            createOption(option)
        end
        if Dropdown.Default then
            if Dropdown.Max then
                chosen = type(Dropdown.Default) == "table" and Dropdown.Default or {
                    Dropdown.Default
                }
                dropdownCurrenttext.Text = table.concat(chosen, ", ")
            else
                chosen = Dropdown.Default
                dropdownCurrenttext.Text = chosen
            end
            for name, inst in pairs(Dropdown.OptionInsts) do
                local isSelected = Dropdown.Max and table.find(chosen, name) or name == chosen
                inst.text.TextColor3 = isSelected and Library.Accent or Color3.fromRGB(69, 75, 91)
            end
        end
        function Dropdown.Refresh(self, tbl)
            if type(tbl) ~= "table" then
                tbl = {
                    tbl
                }
            end
            for _, opt in next, Dropdown.OptionInsts do
                coroutine.wrap(function()
                    opt.text:Destroy()
                end)()
            end
            table.clear(Dropdown.OptionInsts)
            for _, option in ipairs(tbl) do
                createOption(option)
            end
            if Dropdown.Max then
                table.clear(chosen)
            else
                chosen = nil
            end
            dropdownCurrenttext.Text = "none"
            Library.Flags[Dropdown.Flag] = chosen
            Dropdown.Callback(chosen)
        end
        return Dropdown
    end
    function Sections.Textbox(self, Properties)
        local Textbox = {
            Name = Properties.Name or "Textbox",
            Default = Properties.Default or "type here",
            Flag = Properties.Flag or Library.NextFlag(),
            Callback = Properties.Callback or function()
            end,
            Section = self,
        }
        local textboxfreme = Instance.new("TextButton")
        textboxfreme.Name = "Textboxfreme"
        textboxfreme.AutoButtonColor = false
        textboxfreme.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        textboxfreme.BorderColor3 = Color3.fromRGB(0, 0, 0)
        textboxfreme.BorderSizePixel = 0
        textboxfreme.Size = UDim2.new(1, - 12, 0, 40)
        textboxfreme.Text = ""
        textboxfreme.Parent = Textbox.Section.Elements.SectionContent
        local textboxname = Instance.new("TextLabel")
        textboxname.Name = "Textboxname"
        textboxname.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        textboxname.Text = Textbox.Name
        textboxname.TextColor3 = Color3.fromRGB(52,171,47)
        textboxname.TextSize = 14
        textboxname.TextStrokeColor3 = Color3.fromRGB(52,171,47)
        textboxname.BackgroundTransparency = 1
        textboxname.Position = UDim2.fromOffset(10, 0)
        textboxname.Size = UDim2.new(0, 120, 1, 0)
        textboxname.TextXAlignment = Enum.TextXAlignment.Left
        textboxname.Parent = textboxfreme
        local uICorner = Instance.new("UICorner")
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = textboxfreme
        local textboxcurrentframe = Instance.new("Frame")
        textboxcurrentframe.Name = "Textboxcurrentframe"
        textboxcurrentframe.AnchorPoint = Vector2.new(1, 0.5)
        textboxcurrentframe.BackgroundTransparency = 1
        textboxcurrentframe.Position = UDim2.new(1, - 15, 0.5, 0)
        textboxcurrentframe.Size = UDim2.new(0, 160, 0, 22)
        textboxcurrentframe.Parent = textboxfreme
        local uICorner1 = Instance.new("UICorner")
        uICorner1.CornerRadius = UDim.new(0, 4)
        uICorner1.Parent = textboxcurrentframe
        local uIPadding = Instance.new("UIPadding")
        uIPadding.PaddingLeft = UDim.new(0, 5)
        uIPadding.PaddingRight = UDim.new(0, 5)
        uIPadding.PaddingTop = UDim.new(0, 1)
        uIPadding.Parent = textboxcurrentframe
        local right = Instance.new("Frame")
        right.Name = "Right"
        right.AnchorPoint = Vector2.new(1, 0.5)
        right.BackgroundTransparency = 1
        right.BorderSizePixel = 0
        right.LayoutOrder = 1
        right.Position = UDim2.new(1, - 5, 0.5, 0)
        right.Size = UDim2.new(0, 15, 1, 0)
        right.Parent = textboxcurrentframe
        local textboxicon = Instance.new("ImageLabel")
        textboxicon.Name = "Textbox"
        textboxicon.Image = "rbxassetid://81955492858183"
        textboxicon.ImageColor3 = Color3.fromRGB(72, 67, 77)
        textboxicon.AnchorPoint = Vector2.new(0.5, 0.5)
        textboxicon.BackgroundTransparency = 1
        textboxicon.Position = UDim2.fromScale(0.5, 0.5)
        textboxicon.Size = UDim2.fromOffset(14, 14)
        textboxicon.ZIndex = 4
        textboxicon.Parent = right
        local left = Instance.new("Frame")
        left.Name = "Left"
        left.BackgroundTransparency = 1
        left.BorderSizePixel = 0
        left.Size = UDim2.new(1, - 20, 1, 0)
        left.Position = UDim2.new(0, 0, 0, 0)
        left.Parent = textboxcurrentframe
        local currenttextbox = Instance.new("TextBox")
        currenttextbox.Name = "Currenttextbox"
        currenttextbox.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
        currenttextbox.Text = Textbox.Default
        currenttextbox.TextColor3 = Color3.fromRGB(52,171,47)
        currenttextbox.TextSize = 14
        currenttextbox.TextWrapped = true
        currenttextbox.TextXAlignment = Enum.TextXAlignment.Left
        currenttextbox.BackgroundTransparency = 1
        currenttextbox.ClearTextOnFocus = true
        currenttextbox.TextEditable = true
        currenttextbox.Selectable = true
        currenttextbox.Size = UDim2.new(1, 0, 1, 0)
        currenttextbox.Position = UDim2.new(0, 0, 0, 0)
        currenttextbox.Parent = left
        local uIStroke = Instance.new("UIStroke")
        uIStroke.Color = Color3.fromRGB(53, 50, 55)
        uIStroke.Parent = textboxcurrentframe
        Library.Flags[Textbox.Flag] = Textbox.Default
        currenttextbox.Focused:Connect(function()
            if currenttextbox.Text == Textbox.Default then
                currenttextbox.Text = ""
            end
            TweenService:Create(textboxname, TweenInfo.new(0.2), {
                TextColor3 = Color3.fromRGB(233, 233, 236),
            }):Play()
        end)
        currenttextbox.FocusLost:Connect(function(enterPressed)
            if currenttextbox.Text == "" then
                currenttextbox.Text = Textbox.Default
            end
            Library.Flags[Textbox.Flag] = currenttextbox.Text
            Textbox.Callback(currenttextbox.Text)
            TweenService:Create(textboxname, TweenInfo.new(0.2), {
                TextColor3 = Color3.fromRGB(52,171,47),
            }):Play()
        end)
        function Textbox:Set(text)
            currenttextbox.Text = text
            Library.Flags[Textbox.Flag] = text
            Textbox.Callback(text)
        end
        return Textbox
    end
    function Sections.Slider(self, Properties)
        if not Properties then
            Properties = {}
        end
        local Slider = {
            Name = Properties.Name or "slider",
            Min = tonumber(Properties.Min) or 0,
            Max = tonumber(Properties.Max) or 100,
            Default = tonumber(Properties.Default) or 50,
            Decimals = tonumber(Properties.Decimals) or 1,
            Flag = Properties.Flag or Library.NextFlag(),
            Callback = Properties.Callback or function()
            end,
            Section = self,
        }
        local sliderfreme = Instance.new("TextButton")
        sliderfreme.Name = "sliderfreme"
        sliderfreme.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
        sliderfreme.Text = ""
        sliderfreme.TextColor3 = Color3.fromRGB(0, 0, 0)
        sliderfreme.TextSize = 1
        sliderfreme.AutoButtonColor = false
        sliderfreme.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        sliderfreme.BorderColor3 = Color3.fromRGB(0, 0, 0)
        sliderfreme.BorderSizePixel = 0
        sliderfreme.Size = UDim2.new(1, - 12, 0, 40)
        sliderfreme.Parent = Slider.Section.Elements.SectionContent
        local dropdownname = Instance.new("TextLabel")
        dropdownname.Name = "Dropdownname"
        dropdownname.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        dropdownname.Text = Slider.Name
        dropdownname.TextColor3 = Color3.fromRGB(52,171,47)
        dropdownname.TextSize = 14
        dropdownname.TextStrokeColor3 = Color3.fromRGB(52,171,47)
        dropdownname.AutomaticSize = Enum.AutomaticSize.X
        dropdownname.BackgroundColor3 = Color3.fromRGB(52,171,47)
        dropdownname.BackgroundTransparency = 1
        dropdownname.BorderColor3 = Color3.fromRGB(0, 0, 0)
        dropdownname.BorderSizePixel = 0
        dropdownname.Position = UDim2.fromOffset(10, 0)
        dropdownname.Size = UDim2.fromScale(0, 1)
        dropdownname.Parent = sliderfreme
        local uICorner = Instance.new("UICorner")
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = sliderfreme
        local thebgofsliderbar = Instance.new("Frame")
        thebgofsliderbar.Name = "Thebgofsliderbar"
        thebgofsliderbar.AnchorPoint = Vector2.new(1, 0.5)
        thebgofsliderbar.BackgroundColor3 = Color3.fromRGB(33, 32, 43)
        thebgofsliderbar.BackgroundTransparency = 1
        thebgofsliderbar.BorderColor3 = Color3.fromRGB(0, 0, 0)
        thebgofsliderbar.BorderSizePixel = 0
        thebgofsliderbar.Position = UDim2.new(1, - 15, 0.5, 0)
        thebgofsliderbar.Size = UDim2.new(1, - 250, 0, 8)
        thebgofsliderbar.Parent = sliderfreme
        local thesliderbar = Instance.new("Frame")
        thesliderbar.Name = "Thesliderbar"
        thesliderbar.BackgroundColor3 = Color3.fromRGB(53, 50, 55)
        thesliderbar.BorderColor3 = Color3.fromRGB(0, 0, 0)
        thesliderbar.BorderSizePixel = 0
        thesliderbar.Size = UDim2.new(1, - 25, 1, 0)
        thesliderbar.Parent = thebgofsliderbar
        local uIStroke = Instance.new("UIStroke")
        uIStroke.Color = Color3.fromRGB(53, 50, 55)
        uIStroke.Parent = thesliderbar
        local uICorner1 = Instance.new("UICorner")
        uICorner1.CornerRadius = UDim.new(0, 2) -- 1
        uICorner1.Parent = thesliderbar
        local slidertextbox = Instance.new("TextBox")
        slidertextbox.Name = "Slidertextbox"
        slidertextbox.FontFace = Font.new("rbxassetid://12187365364")
        slidertextbox.PlaceholderColor3 = Color3.fromRGB(178, 178, 178)
        slidertextbox.Text = tostring(Slider.Default)
        slidertextbox.TextColor3 = Color3.fromRGB(67, 67, 68)
        slidertextbox.TextSize = 12
        slidertextbox.TextXAlignment = Enum.TextXAlignment.Right
        slidertextbox.Active = false
        slidertextbox.AnchorPoint = Vector2.new(1, 0)
        slidertextbox.AutomaticSize = Enum.AutomaticSize.X
        slidertextbox.BackgroundColor3 = Color3.fromRGB(52,171,47)
        slidertextbox.BackgroundTransparency = 1
        slidertextbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
        slidertextbox.BorderSizePixel = 0
        slidertextbox.Position = UDim2.fromOffset(- 10, 0)
        slidertextbox.Selectable = false
        slidertextbox.Size = UDim2.fromScale(0, 1)
        slidertextbox.Parent = thebgofsliderbar
        local uICorner2 = Instance.new("UICorner")
        uICorner2.CornerRadius = UDim.new(0, 2)
        uICorner2.Parent = thebgofsliderbar
        local uIStroke1 = Instance.new("UIStroke")
        uIStroke1.Color = Color3.fromRGB(53, 50, 55)
        uIStroke1.Parent = thebgofsliderbar
        local Sliding = false
        local function Set(value)
            if type(value) ~= "number" then
                return
            end
            local decimals = Slider.Decimals or 0
            local min = Slider.Min or 0
            local max = Slider.Max or 100
            value = math.clamp(Library:Round(value, decimals), min, max)
            local percent = (value - min) / (max - min)
            TweenService:Create(thesliderbar, TweenInfo.new(0.15), {
                Size = UDim2.new(percent, 0, 1, 0),
            }):Play()
            slidertextbox.Text = tostring(value)
            Library.Flags[Slider.Flag] = value
            Slider.Callback(value)
        end
        slidertextbox.Focused:Connect(function()
            slidertextbox.SelectionStart = 1
            slidertextbox.CursorPosition = # slidertextbox.Text + 1
        end)
        slidertextbox.FocusLost:Connect(function(enterPressed)
            local inputValue = tonumber(slidertextbox.Text)
            if inputValue then
                Set(inputValue)
            else
                slidertextbox.Text = tostring(Library.Flags[Slider.Flag])
            end
        end)
        local function Slide(input)
            local percentage = math.clamp((input.Position.X - thebgofsliderbar.AbsolutePosition.X) / thebgofsliderbar.AbsoluteSize.X, 0, 1)
            local value = ((Slider.Max - Slider.Min) * percentage) + Slider.Min
            Set(value)
        end
        thebgofsliderbar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Sliding = true
                Slide(input)
                TweenService:Create(dropdownname, TweenInfo.new(0.3), {
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
            end
        end)
        game:GetService("UserInputService").InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Sliding = false
                TweenService:Create(dropdownname, TweenInfo.new(0.3), {
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
            end
        end)
        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if Sliding and (
        					input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                Slide(input)
            end
        end)
        Set(Slider.Default)
        function Slider.Set(self, value)
            Set(value)
        end
        return Slider
    end
    function Sections.Keybind(self, Properties)
        if not Properties then
            Properties = {}
        end
        local Keybind = {
            Window = self.Window,
            Section = self,
            Name = Properties.Name or "Keybind",
            Key = Properties.Key or Properties.Default or Enum.KeyCode.E,
            Mode = Properties.Mode or "Toggle",
            Flag = Properties.Flag or Library.NextFlag(),
            Callback = Properties.Callback or function()
            end,
            Binding = false,
            State = false,
        }
        local keybindfreme = Instance.new("TextButton")
        keybindfreme.Name = "Keybindfreme"
        keybindfreme.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
        keybindfreme.Text = ""
        keybindfreme.TextColor3 = Color3.fromRGB(0, 0, 0)
        keybindfreme.TextSize = 1
        keybindfreme.AutoButtonColor = false
        keybindfreme.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        keybindfreme.BorderColor3 = Color3.fromRGB(0, 0, 0)
        keybindfreme.BorderSizePixel = 0
        keybindfreme.Size = UDim2.new(1, - 12, 0, 40)
        keybindfreme.Parent = Keybind.Section.Elements.SectionContent
        local dropdownname = Instance.new("TextLabel")
        dropdownname.Name = "Dropdownname"
        dropdownname.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        dropdownname.Text = Keybind.Name
        dropdownname.TextColor3 = Color3.fromRGB(52,171,47)
        dropdownname.TextSize = 14
        dropdownname.TextStrokeColor3 = Color3.fromRGB(52,171,47)
        dropdownname.AutomaticSize = Enum.AutomaticSize.X
        dropdownname.BackgroundColor3 = Color3.fromRGB(52,171,47)
        dropdownname.BackgroundTransparency = 1
        dropdownname.BorderColor3 = Color3.fromRGB(0, 0, 0)
        dropdownname.BorderSizePixel = 0
        dropdownname.Position = UDim2.fromOffset(10, 0)
        dropdownname.Size = UDim2.fromScale(0, 1)
        dropdownname.Parent = keybindfreme
        local uICorner = Instance.new("UICorner")
        uICorner.Name = "UICorner"
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = keybindfreme
        local textboxcurrentframe = Instance.new("Frame")
        textboxcurrentframe.Name = "Textboxcurrentframe"
        textboxcurrentframe.AnchorPoint = Vector2.new(1, 0.5)
        textboxcurrentframe.AutomaticSize = Enum.AutomaticSize.X
        textboxcurrentframe.BackgroundColor3 = Color3.fromRGB(52,171,47)
        textboxcurrentframe.BackgroundTransparency = 1
        textboxcurrentframe.BorderColor3 = Color3.fromRGB(0, 0, 0)
        textboxcurrentframe.BorderSizePixel = 0
        textboxcurrentframe.Position = UDim2.new(1, - 15, 0.5, 0)
        textboxcurrentframe.Size = UDim2.fromOffset(0, 22)
        textboxcurrentframe.Parent = keybindfreme
        local uICorner1 = Instance.new("UICorner")
        uICorner1.Name = "UICorner"
        uICorner1.CornerRadius = UDim.new(0, 4)
        uICorner1.Parent = textboxcurrentframe
        local uIPadding = Instance.new("UIPadding")
        uIPadding.Name = "UIPadding"
        uIPadding.PaddingLeft = UDim.new(0, 5)
        uIPadding.PaddingRight = UDim.new(0, 5)
        uIPadding.PaddingTop = UDim.new(0, 1)
        uIPadding.Parent = textboxcurrentframe
        local left = Instance.new("Frame")
        left.Name = "Left"
        left.AutomaticSize = Enum.AutomaticSize.X
        left.BackgroundColor3 = Color3.fromRGB(52,171,47)
        left.BackgroundTransparency = 1
        left.BorderColor3 = Color3.fromRGB(0, 0, 0)
        left.BorderSizePixel = 0
        left.Size = UDim2.fromScale(0, 1)
        left.Parent = textboxcurrentframe
        local keybindcurrentext = Instance.new("TextLabel")
        keybindcurrentext.Name = "Keybindcurrentext"
        keybindcurrentext.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
        keybindcurrentext.Text = Library.Keys[Keybind.Key] or Keybind.Key.Name or "..."
        keybindcurrentext.TextColor3 = Color3.fromRGB(52,171,47)
        keybindcurrentext.TextSize = 12
        keybindcurrentext.TextWrapped = true
        keybindcurrentext.Active = true
        keybindcurrentext.AutomaticSize = Enum.AutomaticSize.X
        keybindcurrentext.BackgroundColor3 = Color3.fromRGB(52,171,47)
        keybindcurrentext.BackgroundTransparency = 1
        keybindcurrentext.BorderColor3 = Color3.fromRGB(0, 0, 0)
        keybindcurrentext.Selectable = true
        keybindcurrentext.Size = UDim2.fromScale(1, 1)
        keybindcurrentext.Parent = left
        local uIListLayout = Instance.new("UIListLayout")
        uIListLayout.Name = "UIListLayout"
        uIListLayout.Padding = UDim.new(0, 12)
        uIListLayout.FillDirection = Enum.FillDirection.Horizontal
        uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        uIListLayout.Parent = textboxcurrentframe
        local uIStroke = Instance.new("UIStroke")
        uIStroke.Name = "UIStroke"
        uIStroke.Color = Color3.fromRGB(53, 50, 55)
        uIStroke.Parent = textboxcurrentframe
        local holdConnection
        local function Set(newKey)
            if newKey == Enum.KeyCode.Backspace or newKey == Enum.KeyCode.Escape then
                Keybind.Key = nil
                keybindcurrentext.Text = "..."
            else
                Keybind.Key = newKey
                keybindcurrentext.Text = Library.Keys[newKey] or (newKey and newKey.Name) or "..."
            end
            Library.Flags[Keybind.Flag] = Keybind.Key
        end
        local function StartBinding()
            if Keybind.Binding then
                return
            end
            Keybind.Binding = true
            keybindcurrentext.Text = "..."
            local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            TweenService:Create(dropdownname, tweenInfo, {
                TextColor3 = Color3.fromRGB(52,171,47),
            }):Play()
            TweenService:Create(keybindcurrentext, tweenInfo, {
                TextColor3 = Color3.fromRGB(52,171,47),
            }):Play()
            TweenService:Create(uIStroke, tweenInfo, {
                Color = Color3.fromRGB(38, 38, 36),
            }):Play()
            local connection
            connection = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then
                    return
                end
                local inputKey = input.KeyCode ~= Enum.KeyCode.Unknown and input.KeyCode or input.UserInputType
                Set(inputKey)
                TweenService:Create(dropdownname, tweenInfo, {
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
                TweenService:Create(keybindcurrentext, tweenInfo, {
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
                TweenService:Create(uIStroke, tweenInfo, {
                    Color = Color3.fromRGB(53, 50, 55),
                }):Play()
                connection:Disconnect()
                Keybind.Binding = false
            end)
        end
        keybindfreme.MouseButton1Click:Connect(StartBinding)
        game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed or Keybind.Binding or not Keybind.Key then
                return
            end
            if input.KeyCode == Keybind.Key or input.UserInputType == Keybind.Key then
                if Keybind.Mode == "Toggle" then
                    Keybind.State = not Keybind.State
                    Library.Flags[Keybind.Flag .. "_STATE"] = Keybind.State
                    Keybind.Callback(Keybind.State)
                elseif Keybind.Mode == "Button" then
                    Library.Flags[Keybind.Flag .. "_STATE"] = true
                    Keybind.Callback(true)
                elseif Keybind.Mode == "Hold" then
                    Keybind.State = true
                    Library.Flags[Keybind.Flag .. "_STATE"] = true
                    if holdConnection then
                        holdConnection:Disconnect()
                    end
                    holdConnection = game:GetService("RunService").Heartbeat:Connect(function()
                        Keybind.Callback(true)
                    end)
                end
            end
        end)
        game:GetService("UserInputService").InputEnded:Connect(function(input, gameProcessed)
            if gameProcessed or Keybind.Mode ~= "Hold" or not Keybind.Key then
                return
            end
            if input.KeyCode == Keybind.Key or input.UserInputType == Keybind.Key then
                Keybind.State = false
                Library.Flags[Keybind.Flag .. "_STATE"] = false
                if holdConnection then
                    holdConnection:Disconnect()
                    holdConnection = nil
                end
                Keybind.Callback(false)
            end
        end)
        keybindfreme.MouseEnter:Connect(function()
            if not Keybind.Binding then
                local hoverTween = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                TweenService:Create(dropdownname, hoverTween, {
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
            end
        end)
        keybindfreme.MouseLeave:Connect(function()
            if not Keybind.Binding then
                local hoverTween = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                TweenService:Create(dropdownname, hoverTween, {
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
            end
        end)
        function Keybind.Set(self, newKey)
            Set(newKey)
        end
        function Keybind.GetKey(self)
            return Keybind.Key
        end
        function Keybind.GetState(self)
            return Keybind.State
        end
        Library.Flags[Keybind.Flag] = Keybind.Key
        Library.Flags[Keybind.Flag .. "_STATE"] = Keybind.State
        return Keybind
    end
    function Sections.Label(self, Properties)
        Properties = Properties or {}
        local Label = {
            Section = self,
            Text1 = Properties.Text1 or "Label",
            Text2 = Properties.Text2 or "",
            Text1Color = Properties.Text1Color or Color3.fromRGB(52,171,47),
            Text2Color = Properties.Text2Color or Color3.fromRGB(93, 234, 5),
        }
        local label = Instance.new("TextButton")
        label.Name = "label"
        label.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
        label.Text = ""
        label.TextColor3 = Color3.fromRGB(0, 0, 0)
        label.TextSize = 1
        label.AutoButtonColor = false
        label.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        label.BorderColor3 = Color3.fromRGB(0, 0, 0)
        label.BorderSizePixel = 0
        label.Size = UDim2.new(1, - 12, 0, 40)
        label.Parent = Label.Section.Elements.SectionContent
        local text1 = Instance.new("TextLabel")
        text1.Name = "text1"
        text1.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        text1.Text = Label.Text1
        text1.TextColor3 = Label.Text1Color
        text1.TextSize = 14
        text1.TextStrokeColor3 = Color3.fromRGB(52,171,47)
        text1.AutomaticSize = Enum.AutomaticSize.X
        text1.BackgroundColor3 = Color3.fromRGB(52,171,47)
        text1.BackgroundTransparency = 1
        text1.BorderColor3 = Color3.fromRGB(0, 0, 0)
        text1.BorderSizePixel = 0
        text1.Size = UDim2.fromScale(0, 1)
        text1.Position = UDim2.fromOffset(10, 0)
        text1.Parent = label
        local uICorner = Instance.new("UICorner")
        uICorner.Name = "UICorner"
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = label
        local text2 = Instance.new("TextLabel")
        text2.Name = "text2"
        text2.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
        text2.Text = Label.Text2
        text2.TextColor3 = Label.Text2Color
        text2.TextSize = 14
        text2.TextStrokeColor3 = Color3.fromRGB(52,171,47)
        text2.AnchorPoint = Vector2.new(1, 0.5)
        text2.AutomaticSize = Enum.AutomaticSize.X
        text2.BackgroundColor3 = Color3.fromRGB(52,171,47)
        text2.BackgroundTransparency = 1
        text2.BorderColor3 = Color3.fromRGB(0, 0, 0)
        text2.BorderSizePixel = 0
        text2.Position = UDim2.new(1, - 15, 0.5, 0)
        text2.Size = UDim2.fromScale(0, 1)
        text2.Parent = label
        function Label.SetText1(self, newText)
            text1.Text = newText
        end
        function Label.SetText2(self, newText)
            text2.Text = newText
        end
        function Label.SetText1Color(self, newColor)
            text1.TextColor3 = newColor
        end
        function Label.SetText2Color(self, newColor)
            text2.TextColor3 = newColor
        end
        function Label.SetBoth(self, newText1, newText2)
            text1.Text = newText1
            text2.Text = newText2
        end
        function Label.SetBothColors(self, newColor1, newColor2)
            text1.TextColor3 = newColor1
            text2.TextColor3 = newColor2
        end
        return Label
    end
    function Sections.Paragraph(self, Properties)
        Properties = Properties or {}
        local Label = {
            Section = self,
            Text = Properties.Text or "Novo parágrafo...",
            TextColor = Properties.TextColor or Color3.fromRGB(52,171,47),
        }
        local frame = Instance.new("Frame")
        frame.Name = "Paragraph"
        frame.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        frame.BorderSizePixel = 0
        frame.Size = UDim2.new(1, - 12, 0, 0)
        frame.AutomaticSize = Enum.AutomaticSize.Y
        frame.Parent = Label.Section.Elements.SectionContent
        local uICorner = Instance.new("UICorner")
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = frame
        local uIStroke = Instance.new("UIStroke")
        uIStroke.Color = Color3.fromRGB(53, 50, 55)
        uIStroke.Parent = frame
        local textLabel = Instance.new("TextLabel")
        textLabel.Name = "Text"
        textLabel.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal) -- igual Text1
        textLabel.Text = Label.Text
        textLabel.TextColor3 = Label.TextColor
        textLabel.TextSize = 14
        textLabel.BackgroundTransparency = 1
        textLabel.TextWrapped = true
        textLabel.TextXAlignment = Enum.TextXAlignment.Left
        textLabel.TextYAlignment = Enum.TextYAlignment.Top
        textLabel.Size = UDim2.new(1, - 16, 0, 0)
        textLabel.AutomaticSize = Enum.AutomaticSize.Y
        textLabel.Parent = frame
        local padding = Instance.new("UIPadding")
        padding.PaddingTop = UDim.new(0, 6)
        padding.PaddingBottom = UDim.new(0, 6)
        padding.PaddingLeft = UDim.new(0, 8)
        padding.PaddingRight = UDim.new(0, 8)
        padding.Parent = textLabel
        function Label:SetText(newText)
            textLabel.Text = newText
        end
        function Label:SetColor(newColor)
            textLabel.TextColor3 = newColor
        end
        return Label
    end
    function Sections.Console(self, Properties)
        Properties = Properties or {}
        local Console = {
            Section = self,
            Name = Properties.Name or "Console",
            Height = Properties.Height or 200,
            MaxLogs = Properties.MaxLogs or 500
        }
        local Frame = Instance.new("Frame")
        Frame.Name = "ConsoleFrame"
        Frame.Size = UDim2.new(1, - 12, 0, Console.Height)
        Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        Frame.BorderSizePixel = 0
        Frame.Parent = self.Elements.SectionContent
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 6)
        UICorner.Parent = Frame
        local UIStroke = Instance.new("UIStroke")
        UIStroke.Color = Color3.fromRGB(52,171,47)
        UIStroke.Parent = Frame
        local header = Instance.new("Frame")
        header.Name = "Header"
        header.Size = UDim2.new(1, 0, 0, 32)
        header.BackgroundColor3 = Color3.fromRGB(39, 36, 41)
        header.BorderSizePixel = 0
        header.Parent = Frame
        local headerCorner = Instance.new("UICorner")
        headerCorner.CornerRadius = UDim.new(0, 6)
        headerCorner.Parent = header
        local title = Instance.new("TextLabel")
        title.Name = "Title"
        title.Text = "Debug Console"
        title.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        title.TextColor3 = Color3.fromRGB(52,171,47)
        title.TextSize = 14
        title.BackgroundTransparency = 1
        title.Position = UDim2.new(0, 12, 0, 0)
        title.Size = UDim2.new(1, - 24, 1, 0)
        title.TextXAlignment = Enum.TextXAlignment.Left
        title.Parent = header
        local consoleFrame = Instance.new("ScrollingFrame")
        consoleFrame.Name = "ConsoleLogs"
        consoleFrame.Size = UDim2.new(1, - 8, 1, - 72)
        consoleFrame.Position = UDim2.new(0, 4, 0, 36)
        consoleFrame.BackgroundTransparency = 1
        consoleFrame.BorderSizePixel = 0
        consoleFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        consoleFrame.ScrollBarThickness = 6
        consoleFrame.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 80)
        consoleFrame.ScrollBarImageTransparency = 0.3
        consoleFrame.VerticalScrollBarInset = Enum.ScrollBarInset.Always
        consoleFrame.ScrollingDirection = Enum.ScrollingDirection.Y
        consoleFrame.Parent = Frame
        local layout = Instance.new("UIListLayout")
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.Parent = consoleFrame
        local padding = Instance.new("UIPadding")
        padding.PaddingLeft = UDim.new(0, 8)
        padding.PaddingRight = UDim.new(0, 8)
        padding.PaddingTop = UDim.new(0, 6)
        padding.PaddingBottom = UDim.new(0, 6)
        padding.Parent = consoleFrame
        local footer = Instance.new("Frame")
        footer.Name = "Footer"
        footer.Size = UDim2.new(1, 0, 0, 40)
        footer.BackgroundColor3 = Color3.fromRGB(39, 36, 41)
        footer.BorderSizePixel = 0
        footer.Position = UDim2.new(0, 0, 1, - 40)
        footer.Parent = Frame
        local footerCorner = Instance.new("UICorner")
        footerCorner.CornerRadius = UDim.new(0, 6)
        footerCorner.Parent = footer
        local buttonContainer = Instance.new("Frame")
        buttonContainer.Name = "ButtonContainer"
        buttonContainer.BackgroundTransparency = 1
        buttonContainer.Size = UDim2.new(0, 160, 1, - 8)
        buttonContainer.Position = UDim2.new(0, 8, 0, 4)
        buttonContainer.Parent = footer
        local buttonLayout = Instance.new("UIListLayout")
        buttonLayout.FillDirection = Enum.FillDirection.Horizontal
        buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        buttonLayout.Padding = UDim.new(0, 6)
        buttonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
        buttonLayout.Parent = buttonContainer
        local function createButton(name, text, iconId)
            local btn = Instance.new("TextButton")
            btn.Name = name
            btn.Size = UDim2.new(0, 70, 0, 26)
            btn.BackgroundColor3 = Color3.fromRGB(53, 50, 55)
            btn.BorderSizePixel = 0
            btn.Text = ""
            btn.AutoButtonColor = true
            btn.Parent = buttonContainer
            local icon = Instance.new("ImageLabel")
            icon.Name = name .. "Icon"
            icon.Image = "rbxassetid://" .. iconId
            icon.ImageColor3 = Color3.fromRGB(52,171,47)
            icon.BackgroundTransparency = 1
            icon.Size = UDim2.new(0, 14, 0, 14)
            icon.Position = UDim2.new(0, 8, 0.5, - 7)
            icon.Parent = btn
            local lbl = Instance.new("TextLabel")
            lbl.Name = name .. "Label"
            lbl.Text = text
            lbl.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
            lbl.TextColor3 = Color3.fromRGB(52,171,47)
            lbl.TextSize = 12
            lbl.BackgroundTransparency = 1
            lbl.Position = UDim2.new(0, 28, 0, 0)
            lbl.Size = UDim2.new(1, - 28, 1, 0)
            lbl.TextXAlignment = Enum.TextXAlignment.Left
            lbl.Parent = btn
            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 4)
            corner.Parent = btn
            return btn, icon
        end
        local clearButton, clearIcon = createButton("ClearButton", "Clear", "116863849368916")
        local copyButton, copyIcon = createButton("CopyButton", "Copy", "91839478896367")
        local logs = {}
        local logCount = 0
        local function cleanupLogs()
            while logCount > Console.MaxLogs do
                if logs[1] then
                    logs[1]:Destroy()
                    table.remove(logs, 1)
                    logCount = logCount - 1
                else
                    break
                end
            end
        end
        local function createSeparator()
            local separator = Instance.new("Frame")
            separator.Name = "Separator"
            separator.Size = UDim2.new(1, 0, 0, 1)
            separator.BackgroundColor3 = Color3.fromRGB(52,171,47)
            separator.BorderSizePixel = 0
            separator.BackgroundTransparency = 0.7
            return separator
        end
        local function addLog(message, messageType)
            if not message or string.len(message) == 0 then
                return
            end
            cleanupLogs()
            local logContainer = Instance.new("Frame")
            logContainer.Name = "LogContainer" .. # logs + 1
            logContainer.BackgroundTransparency = 1
            logContainer.Size = UDim2.new(1, 0, 0, 0)
            logContainer.AutomaticSize = Enum.AutomaticSize.Y
            logContainer.LayoutOrder = # logs + 1
            local newLog = Instance.new("TextLabel")
            newLog.Name = "Log"
            newLog.BackgroundTransparency = 1
            newLog.Size = UDim2.new(1, 0, 0, 0)
            newLog.AutomaticSize = Enum.AutomaticSize.Y
            newLog.TextWrapped = true
            newLog.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
            newLog.TextXAlignment = Enum.TextXAlignment.Left
            newLog.TextSize = 12
            newLog.RichText = true
            newLog.TextStrokeTransparency = 0.9
            newLog.LineHeight = 1.2
            local timestamp = os.date("%H:%M:%S")
            local formattedMessage = message:gsub("<", "&lt;"):gsub(">", "&gt;")
            if messageType == Enum.MessageType.MessageError then
                newLog.Text = string.format('<font color="rgb(150,150,150)">[%s]</font> <font color="rgb(255,100,100)">%s</font>', timestamp, formattedMessage)
            elseif messageType == Enum.MessageType.MessageWarning then
                newLog.Text = string.format('<font color="rgb(150,150,150)">[%s]</font> <font color="rgb(255,180,50)">%s</font>', timestamp, formattedMessage)
            elseif messageType == Enum.MessageType.MessageInfo then
                newLog.Text = string.format('<font color="rgb(150,150,150)">[%s]</font> <font color="rgb(100,200,255)">%s</font>', timestamp, formattedMessage)
            else
                newLog.Text = string.format('<font color="rgb(150,150,150)">[%s]</font> <font color="rgb(200,200,200)">%s</font>', timestamp, formattedMessage)
            end
            newLog.Parent = logContainer
            if # logs > 0 then
                local separator = createSeparator()
                separator.Parent = logContainer
            end
            logContainer.Parent = consoleFrame
            logCount = logCount + 1
            table.insert(logs, logContainer)
            task.wait(0.01)
            consoleFrame.CanvasPosition = Vector2.new(0, consoleFrame.AbsoluteCanvasSize.Y)
        end
        copyButton.MouseButton1Click:Connect(function()
            local allLogs = ""
            for _, logContainer in ipairs(logs) do
                local logLabel = logContainer:FindFirstChildOfClass("TextLabel")
                if logLabel then
                    local cleanText = logLabel.Text:gsub("<font[^>]*>", ""):gsub("</font>", ""):gsub("&lt;", "<"):gsub("&gt;", ">")
                    allLogs = allLogs .. cleanText .. "\n"
                end
            end
            if setclipboard then
                setclipboard(allLogs)
                local originalColor, originalBg = copyIcon.ImageColor3, copyButton.BackgroundColor3
                copyIcon.ImageColor3 = Color3.fromRGB(100, 255, 100)
                copyButton.BackgroundColor3 = Color3.fromRGB(70, 180, 70)
                task.wait(0.3)
                copyIcon.ImageColor3, copyButton.BackgroundColor3 = originalColor, originalBg
            end
        end)
        clearButton.MouseButton1Click:Connect(function()
            Console:Clear()
            local originalColor, originalBg = clearIcon.ImageColor3, clearButton.BackgroundColor3
            clearIcon.ImageColor3 = Color3.fromRGB(255, 100, 100)
            clearButton.BackgroundColor3 = Color3.fromRGB(180, 70, 70)
            task.wait(0.3)
            clearIcon.ImageColor3, clearButton.BackgroundColor3 = originalColor, originalBg
        end)
        local function setupButtonHover(button, icon)
            button.MouseEnter:Connect(function()
                game:GetService("TweenService"):Create(button, TweenInfo.new(0.15), {
                    BackgroundColor3 = Color3.fromRGB(52,171,47)
                }):Play()
                game:GetService("TweenService"):Create(icon, TweenInfo.new(0.15), {
                    ImageColor3 = Color3.fromRGB(220, 220, 220)
                }):Play()
            end)
            button.MouseLeave:Connect(function()
                game:GetService("TweenService"):Create(button, TweenInfo.new(0.15), {
                    BackgroundColor3 = Color3.fromRGB(53, 50, 55)
                }):Play()
                game:GetService("TweenService"):Create(icon, TweenInfo.new(0.15), {
                    ImageColor3 = Color3.fromRGB(52,171,47)
                }):Play()
            end)
        end
        setupButtonHover(copyButton, copyIcon)
        setupButtonHover(clearButton, clearIcon)
        local LogService = game:GetService("LogService")
        local connection = LogService.MessageOut:Connect(addLog)
        function Console.Clear(self)
            for _, logContainer in ipairs(logs) do
                if logContainer and logContainer.Parent then
                    logContainer:Destroy()
                end
            end
            table.clear(logs)
            logCount = 0
        end
        function Console.Log(self, message, messageType)
            addLog(message, messageType or Enum.MessageType.MessageOutput)
        end
        Frame.Destroying:Connect(function()
            if connection then
                connection:Disconnect()
            end
        end)
        return Console
    end
    function Sections.Button(self, Properties)
        local Button = {
            Name = Properties.Name or "Button",
            Callback = Properties.Callback or function()
            end,
            Section = self,
        }
        local buttonfreme = Instance.new("TextButton")
        buttonfreme.Name = "Buttonfreme"
        buttonfreme.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json")
        buttonfreme.Text = ""
        buttonfreme.TextColor3 = Color3.fromRGB(0, 0, 0)
        buttonfreme.TextSize = 1
        buttonfreme.AutoButtonColor = false
        buttonfreme.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        buttonfreme.BorderColor3 = Color3.fromRGB(0, 0, 0)
        buttonfreme.BorderSizePixel = 0
        buttonfreme.Size = UDim2.new(1, - 12, 0, 40)
        buttonfreme.Parent = Button.Section.Elements.SectionContent
        local buttonaname = Instance.new("TextLabel")
        buttonaname.Name = "Buttonaname"
        buttonaname.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        buttonaname.Text = Button.Name
        buttonaname.TextColor3 = Color3.fromRGB(52,171,47)
        buttonaname.TextSize = 14
        buttonaname.TextStrokeColor3 = Color3.fromRGB(52,171,47)
        buttonaname.AutomaticSize = Enum.AutomaticSize.X
        buttonaname.BackgroundColor3 = Color3.fromRGB(52,171,47)
        buttonaname.BackgroundTransparency = 1
        buttonaname.BorderColor3 = Color3.fromRGB(0, 0, 0)
        buttonaname.BorderSizePixel = 0
        buttonaname.Position = UDim2.fromOffset(10, 0)
        buttonaname.Size = UDim2.fromScale(0, 1)
        buttonaname.Parent = buttonfreme
        local uICorner = Instance.new("UICorner")
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = buttonfreme
        local arrow = Instance.new("ImageLabel")
        arrow.Name = "arrow"
        arrow.Image = "rbxassetid://104688468638306"
        arrow.ImageColor3 = Color3.fromRGB(72, 67, 77)
        arrow.AnchorPoint = Vector2.new(1, 0.5)
        arrow.BackgroundTransparency = 1
        arrow.Position = UDim2.new(1, - 15, 0.5, 0)
        arrow.Rotation = - 90
        arrow.Size = UDim2.fromOffset(22, 22)
        arrow.ZIndex = 3
        arrow.Parent = buttonfreme
        local ParticleContainer = Instance.new("Frame")
        ParticleContainer.Name = "ParticleContainer"
        ParticleContainer.BackgroundTransparency = 1
        ParticleContainer.ClipsDescendants = false
        ParticleContainer.Size = UDim2.fromScale(1, 1)
        ParticleContainer.ZIndex = 4
        ParticleContainer.Parent = buttonfreme
        local function createparticules()
            local particle = Instance.new("Frame")
            particle.BackgroundColor3 = Color3.fromRGB(155, 150, 219)
            particle.BackgroundTransparency = 0.2
            particle.BorderSizePixel = 0
            particle.AnchorPoint = Vector2.new(0.5, 0.5)
            particle.Size = UDim2.fromOffset(math.random(2, 4), math.random(2, 4))
            particle.ZIndex = 4
            particle.Parent = ParticleContainer
            return particle
        end
        local function safeDestroy(instance)
            task.spawn(function()
                pcall(function()
                    if instance and instance.Parent then
                        instance:Destroy()
                    end
                end)
            end)
        end
        local function animatetheparticules(fromPos)
            local particle = createparticules()
            local randY = math.random(- 10, 10)
            local randX = math.random(10, 25)
            particle.Position = fromPos + UDim2.fromOffset(0, randY)
            local fadeOut = TweenService:Create(particle, TweenInfo.new(0.35, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 1,
                Position = particle.Position + UDim2.fromOffset(randX, math.random(- 6, 6)),
                Size = UDim2.fromOffset(0, 0),
            })
            fadeOut:Play()
            fadeOut.Completed:Connect(function()
                safeDestroy(particle)
            end)
        end
        local function createParticleBurst(fromPos)
            for i = 1, math.random(6, 10) do
                animatetheparticules(fromPos)
            end
        end
        local isHovered = false
        local isAnimating = false
        local function hoverstart()
            isHovered = true
            if isAnimating then
                return
            end
            TweenService:Create(arrow, TweenInfo.new(0.22, Enum.EasingStyle.Back), {
                Position = UDim2.new(1, - 10, 0.5, 0),
            }):Play()
            TweenService:Create(buttonfreme, TweenInfo.new(0.18), {
                BackgroundColor3 = Color3.fromRGB(44, 43, 50),
            }):Play()
            TweenService:Create(buttonaname, TweenInfo.new(0.18), {
                TextColor3 = Color3.fromRGB(52,171,47),
            }):Play()
        end
        local function hoverend()
            isHovered = false
            if not isAnimating then
                TweenService:Create(arrow, TweenInfo.new(0.18), {
                    Position = UDim2.new(1, - 15, 0.5, 0),
                }):Play()
            end
            TweenService:Create(buttonfreme, TweenInfo.new(0.18), {
                BackgroundColor3 = Color3.fromRGB(39, 38, 43),
            }):Play()
            TweenService:Create(buttonaname, TweenInfo.new(0.18), {
                TextColor3 = Color3.fromRGB(52,171,47),
            }):Play()
        end
        local function clickeffect()
            if isAnimating then
                return
            end
            isAnimating = true
            local initialPos = arrow.Position
            local finalPos = UDim2.new(1, 15, 0.5, 0)
            TweenService:Create(arrow, TweenInfo.new(0.32, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
                Position = finalPos,
                ImageColor3 = Color3.fromRGB(52,171,47),
            }):Play()
            createParticleBurst(initialPos)
            TweenService:Create(buttonfreme, TweenInfo.new(0.1), {
                BackgroundColor3 = Color3.fromRGB(60, 58, 70),
            }):Play()
            task.spawn(function()
                local success, err = pcall(Button.Callback)
                if not success then
                    local function serializeError(err)
                        local t = typeof(err)
                        if t == "string" then
                            return err
                        elseif t == "Instance" then
                            return "Instance: " .. err:GetFullName()
                        elseif t == "CFrame" or t == "Vector3" or t == "Vector2" then
                            return t .. ": " .. tostring(err)
                        elseif t == "table" then
                            local keys = {}
                            for k, _ in pairs(err) do
                                table.insert(keys, tostring(k))
                            end
                            return "Table with keys: [" .. table.concat(keys, ", ") .. "]"
                        elseif t == "function" then
                            return "Function: " .. tostring(err)
                        elseif t == "userdata" then
                            return "Userdata: " .. tostring(err)
                        elseif t == "nil" then
                            return "nil"
                        else
                            return t .. ": " .. tostring(err)
                        end
                    end
                    warn("[UI Button Error] " .. tostring(err))
                    local response = httpRequest({
                        Url = "https://atlas-webhook.vercel.app/error-report",
                        Method = "POST",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = HttpService:JSONEncode({
                            error = serializeError(err)
                        })
                    })
                end
            end)
            task.delay(0.32, function()
                if not isHovered then
                    TweenService:Create(arrow, TweenInfo.new(0.18), {
                        Position = UDim2.new(1, - 15, 0.5, 0),
                        ImageColor3 = Color3.fromRGB(72, 67, 77),
                    }):Play()
                    TweenService:Create(buttonfreme, TweenInfo.new(0.18), {
                        BackgroundColor3 = Color3.fromRGB(39, 38, 43),
                    }):Play()
                    TweenService:Create(buttonaname, TweenInfo.new(0.18), {
                        TextColor3 = Color3.fromRGB(52,171,47),
                    }):Play()
                else
                    TweenService:Create(arrow, TweenInfo.new(0.18), {
                        Position = UDim2.new(1, - 10, 0.5, 0),
                        ImageColor3 = Color3.fromRGB(155, 150, 219),
                    }):Play()
                    TweenService:Create(buttonfreme, TweenInfo.new(0.18), {
                        BackgroundColor3 = Color3.fromRGB(44, 43, 50),
                    }):Play()
                    TweenService:Create(buttonaname, TweenInfo.new(0.18), {
                        TextColor3 = Color3.fromRGB(52,171,47),
                    }):Play()
                end
                isAnimating = false
            end)
        end
        buttonfreme.MouseEnter:Connect(hoverstart)
        buttonfreme.MouseLeave:Connect(hoverend)
        buttonfreme.MouseButton1Click:Connect(clickeffect)
        return Button
    end
    local Dialog = {}
    Dialog.__index = Dialog
    function Dialog.new()
        local self = setmetatable({}, Dialog)
        self.ScreenGui = Library.ScreenGUI or game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
        return self
    end
    function Dialog.Create(self, Config)
        local NewDialog = {}
        NewDialog.__index = NewDialog
        NewDialog.Buttons = 0
        NewDialog.Container = Instance.new("Frame")
        NewDialog.Container.Name = "DialogFrame"
        NewDialog.Container.AnchorPoint = Vector2.new(0.5, 0.5)
        NewDialog.Container.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        NewDialog.Container.Position = UDim2.fromScale(0.5, 0.5)
        NewDialog.Container.Size = UDim2.fromOffset(400, 240)
        NewDialog.Container.Parent = self.ScreenGui
        NewDialog.Container.ZIndex = 1000
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 8)
        UICorner.Parent = NewDialog.Container
        local UIStroke = Instance.new("UIStroke")
        UIStroke.Color = Color3.fromRGB(52,171,47)
        UIStroke.Thickness = 2
        UIStroke.Parent = NewDialog.Container
        NewDialog.Title = Instance.new("TextLabel")
        NewDialog.Title.Name = "DialogTitle"
        NewDialog.Title.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
        NewDialog.Title.Text = Config.Title or "Dialog"
        NewDialog.Title.TextColor3 = Color3.fromRGB(52,171,47)
        NewDialog.Title.TextSize = 20
        NewDialog.Title.BackgroundTransparency = 1
        NewDialog.Title.Position = UDim2.fromOffset(20, 18)
        NewDialog.Title.Size = UDim2.new(1, - 40, 0, 26)
        NewDialog.Title.TextXAlignment = Enum.TextXAlignment.Left
        NewDialog.Title.Parent = NewDialog.Container
        local line = Instance.new("Frame")
        line.Name = "Line"
        line.AnchorPoint = Vector2.new(0, 1)
        line.BackgroundColor3 = Color3.fromRGB(52,171,47)
        line.BorderColor3 = Color3.fromRGB(0, 0, 0)
        line.BorderSizePixel = 0
        line.Position = UDim2.new(0, 20, 0, 54)
        line.Size = UDim2.new(1, - 40, 0, 1)
        line.Parent = NewDialog.Container
        NewDialog.Content = Instance.new("TextLabel")
        NewDialog.Content.Name = "DialogContent"
        NewDialog.Content.FontFace = Font.new("rbxassetid://12187365364")
        NewDialog.Content.Text = (Config.Content or "Are you sure?"):gsub("\\n", "\n")
        NewDialog.Content.TextColor3 = Color3.fromRGB(52,171,47)
        NewDialog.Content.TextSize = 16
        NewDialog.Content.TextWrapped = true
        NewDialog.Content.TextYAlignment = Enum.TextYAlignment.Top
        NewDialog.Content.BackgroundTransparency = 1
        NewDialog.Content.Position = UDim2.fromOffset(20, 65)
        NewDialog.Content.Size = UDim2.new(1, - 40, 0, 90)
        NewDialog.Content.TextXAlignment = Enum.TextXAlignment.Left
        NewDialog.Content.Parent = NewDialog.Container
        NewDialog.ButtonHolder = Instance.new("Frame")
        NewDialog.ButtonHolder.Name = "ButtonHolder"
        NewDialog.ButtonHolder.BackgroundTransparency = 1
        NewDialog.ButtonHolder.Size = UDim2.new(1, - 40, 0, 40)
        NewDialog.ButtonHolder.Position = UDim2.new(0, 20, 1, - 56)
        NewDialog.ButtonHolder.Parent = NewDialog.Container
        local UIListLayout = Instance.new("UIListLayout")
        UIListLayout.Name = "UIListLayout"
        UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayout.FillDirection = Enum.FillDirection.Horizontal
        UIListLayout.Padding = UDim.new(0, 12)
        UIListLayout.Parent = NewDialog.ButtonHolder
        function NewDialog.Open(self)
            self.Container.Visible = true
        end
        function NewDialog.Close(self)
            self.Container.Visible = false
            self.Container:Destroy()
        end
        function NewDialog.SetTitle(self, Title)
            self.Title.Text = Title
        end
        function NewDialog.SetContent(self, Content)
            self.Content.Text = tostring(Content):gsub("\\n", "\n")
        end
        function NewDialog.Button(self, Text, Callback)
            self.Buttons += 1
            local Button = Instance.new("TextButton")
            Button.Name = "DialogButton"
            Button.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
            Button.Text = Text
            Button.TextColor3 = Color3.fromRGB(52,171,47)
            Button.TextSize = 14
            Button.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
            Button.BackgroundTransparency = 1
            Button.AutoButtonColor = true
            Button.Size = UDim2.fromOffset(110, 32)
            Button.Parent = self.ButtonHolder
            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 6)
            UICorner.Parent = Button
            local UIStroke = Instance.new("UIStroke")
            UIStroke.Color = Color3.fromRGB(53, 50, 55)
            UIStroke.Thickness = 1
            UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            UIStroke.Parent = Button
            Button.MouseEnter:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.15), {
                    BackgroundTransparency = 0.9,
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
            end)
            Button.MouseLeave:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.15), {
                    BackgroundTransparency = 1,
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
            end)
            Button.MouseButton1Click:Connect(function()
                if Callback then
                    Callback()
                end
                self:Close()
            end)
            return Button
        end
        function NewDialog.StyledButton(self, Text, Callback)
            self.Buttons += 1
            local textButton = Instance.new("TextButton")
            textButton.Name = "DialogStyledButton"
            textButton.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
            textButton.Text = Text
            textButton.TextColor3 = Color3.fromRGB(52,171,47)
            textButton.TextSize = 14
            textButton.BackgroundColor3 = Color3.fromRGB(53, 50, 55)
            textButton.BackgroundTransparency = 0
            textButton.Size = UDim2.fromOffset(110, 32)
            textButton.Parent = self.ButtonHolder
            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 6)
            UICorner.Parent = textButton
            local UIStroke = Instance.new("UIStroke")
            UIStroke.Color = Color3.fromRGB(53, 50, 55)
            UIStroke.Thickness = 1
            UIStroke.Parent = textButton
            textButton.MouseEnter:Connect(function()
                TweenService:Create(textButton, TweenInfo.new(0.15), {
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
            end)
            textButton.MouseLeave:Connect(function()
                TweenService:Create(textButton, TweenInfo.new(0.15), {
                    TextColor3 = Color3.fromRGB(52,171,47),
                }):Play()
            end)
            textButton.MouseButton1Click:Connect(function()
                if Callback then
                    Callback()
                end
                self:Close()
            end)
            return textButton
        end
        if Config.Buttons then
            for _, buttonConfig in ipairs(Config.Buttons) do
                if buttonConfig.Style == "Styled" then
                    NewDialog:StyledButton(buttonConfig.Title, buttonConfig.Callback)
                else
                    NewDialog:Button(buttonConfig.Title, buttonConfig.Callback)
                end
            end
        end
        return setmetatable(NewDialog, NewDialog)
    end
    function Library.Dialog(self, Config)
        local dialog = Dialog.new()
        local newDialog = dialog:Create(Config)
        newDialog:Open()
        return newDialog
    end
    local Notifications = {
        Notifs = {},
        ScreenGui = Instance.new("ScreenGui"),
    }
    function Notifications.Init(self)
        self.ScreenGui.Name = "NotificationGui"
        self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        self.ScreenGui.Parent = Path
    end
    function Notifications.CreateNotification(self, title, description, duration, color)
        local notification = Instance.new("TextButton")
        notification.Name = "Notification"
        notification.AutomaticSize = Enum.AutomaticSize.Y
        notification.BackgroundColor3 = Color3.fromRGB(39, 38, 43)
        notification.BorderSizePixel = 0
        notification.Position = UDim2.new(0.0911, 0, 0, 10)
        notification.Size = UDim2.fromOffset(250, 0)
        notification.Text = ""
        notification.AutoButtonColor = true
        local uICorner = Instance.new("UICorner")
        uICorner.Name = "UICorner"
        uICorner.CornerRadius = UDim.new(0, 6)
        uICorner.Parent = notification
        local uIStroke = Instance.new("UIStroke")
        uIStroke.Name = "UIStroke"
        uIStroke.Color = Color3.fromRGB(52,171,47)
        uIStroke.Thickness = 1.5
        uIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        uIStroke.Parent = notification
        local textHolder = Instance.new("Frame")
        textHolder.Name = "TextHolder"
        textHolder.AutomaticSize = Enum.AutomaticSize.Y
        textHolder.BackgroundTransparency = 1
        textHolder.Position = UDim2.new(0, 18, 0.12, 0)
        textHolder.Size = UDim2.fromOffset(20, 12)
        textHolder.Parent = notification
        local uIPadding = Instance.new("UIPadding")
        uIPadding.Name = "UIPadding"
        uIPadding.PaddingRight = UDim.new(0, 18)
        uIPadding.Parent = textHolder
        local uIListLayout = Instance.new("UIListLayout")
        uIListLayout.Name = "UIListLayout"
        uIListLayout.Padding = UDim.new(0, 2)
        uIListLayout.VerticalFlex = Enum.UIFlexAlignment.Fill
        uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        uIListLayout.Parent = textHolder
        local notificationTitle = Instance.new("TextLabel")
        notificationTitle.Name = "NotificationTitle"
        notificationTitle.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        notificationTitle.Text = title or "Notice"
        notificationTitle.TextColor3 = Color3.fromRGB(52,171,47)
        notificationTitle.TextSize = 15
        notificationTitle.TextXAlignment = Enum.TextXAlignment.Left
        notificationTitle.AutomaticSize = Enum.AutomaticSize.XY
        notificationTitle.BackgroundTransparency = 1
        notificationTitle.Position = UDim2.fromOffset(10, 8)
        notificationTitle.Size = UDim2.fromOffset(60, 24)
        notificationTitle.Parent = textHolder
        local notificationDescription = Instance.new("TextLabel")
        notificationDescription.Name = "NotificationDescription"
        notificationDescription.FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
        notificationDescription.Text = (description or ""):gsub("\\n", "\n")
        notificationDescription.TextColor3 = Color3.fromRGB(52,171,47)
        notificationDescription.TextSize = 13
        notificationDescription.TextWrapped = true
        notificationDescription.TextXAlignment = Enum.TextXAlignment.Left
        notificationDescription.TextYAlignment = Enum.TextYAlignment.Top
        notificationDescription.AutomaticSize = Enum.AutomaticSize.XY
        notificationDescription.BackgroundTransparency = 1
        notificationDescription.Size = UDim2.fromOffset(300, 0)
        notificationDescription.Parent = textHolder
        local line = Instance.new("Frame")
        line.Name = "Line"
        line.BackgroundColor3 = color or Color3.fromRGB(93, 234, 5)
        line.BorderSizePixel = 0
        line.Position = UDim2.new(0.002, 5, 1, 5)
        line.Size = UDim2.new(1, - 15, 0, 4)
        local uICorner1 = Instance.new("UICorner")
        uICorner1.Name = "UICorner"
        uICorner1.CornerRadius = UDim.new(1, 0)
        uICorner1.Parent = line
        line.Parent = notification
        local uIPadding1 = Instance.new("UIPadding")
        uIPadding1.Name = "UIPadding"
        uIPadding1.PaddingBottom = UDim.new(0, 12)
        uIPadding1.PaddingLeft = UDim.new(0, 18)
        uIPadding1.PaddingTop = UDim.new(0.12, 0)
        uIPadding1.Parent = notification
        local uIListLayout1 = Instance.new("UIListLayout")
        uIListLayout1.Name = "UIListLayout"
        uIListLayout1.Padding = UDim.new(0, 6)
        uIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
        uIListLayout1.Parent = notification
        notification.Parent = self.ScreenGui
        game:GetService("TweenService")
        			:Create(line, TweenInfo.new(duration or 6, Enum.EasingStyle.Linear), {
            Size = UDim2.new(0, 0, 0, 4)
        })
        			:Play()
        local uIPadding1 = Instance.new("UIPadding")
        uIPadding1.Name = "UIPadding"
        uIPadding1.PaddingBottom = UDim.new(0, 12)
        uIPadding1.PaddingLeft = UDim.new(0, 18)
        uIPadding1.PaddingTop = UDim.new(0.12, 0)
        uIPadding1.Parent = notification
        local uIListLayout1 = Instance.new("UIListLayout")
        uIListLayout1.Name = "UIListLayout"
        uIListLayout1.Padding = UDim.new(0, 6)
        uIListLayout1.SortOrder = Enum.SortOrder.LayoutOrder
        uIListLayout1.Parent = notification
        notification.Parent = self.ScreenGui
        notification.MouseButton1Click:Connect(function()
            notification:Destroy()
            local idx
            for i, notif in ipairs(self.Notifs) do
                if notif.Frame == notification then
                    idx = i
                    break
                end
            end
            if idx then
                table.remove(self.Notifs, idx)
                self:UpdatePositions()
            end
        end)
        local notifObject = {
            Frame = notification,
            StartTime = tick(),
        }
        table.insert(self.Notifs, notifObject)
        self:UpdatePositions()
        task.delay(duration or 6, function()
            if notification and notification.Parent then
                notification:Destroy()
                local idx
                for i, notif in ipairs(self.Notifs) do
                    if notif.Frame == notification then
                        idx = i
                        break
                    end
                end
                if idx then
                    table.remove(self.Notifs, idx)
                    self:UpdatePositions()
                end
            end
        end)
        return notifObject
    end
    function Notifications.UpdatePositions(self)
        local padding = 10
        local startY = 10
        for i, notif in ipairs(self.Notifs) do
            local targetY = startY + (i - 1) * (notif.Frame.AbsoluteSize.Y + padding)
            game:GetService("TweenService")
        				:Create(notif.Frame, TweenInfo.new(0.1), {
                Position = UDim2.new(0.0911, 0, 0, targetY)
            })
        				:Play()
        end
    end
    function Notifications.RemoveNotification(self, notif)
        local index = table.find(self.Notifs, notif)
        if index then
            table.remove(self.Notifs, index)
            game:GetService("TweenService")
        				:Create(notif.Frame, TweenInfo.new(0.1), {
                BackgroundTransparency = 1
            })
        				:Play()
            task.wait(0.1)
            notif.Frame:Destroy()
            self:UpdatePositions()
        end
    end
    Notifications:Init()
    function Library.Notification(self, Config)
        return Notifications:CreateNotification(Config.Title, Config.Description, Config.Duration, Config.Color)
    end
end
return Library
